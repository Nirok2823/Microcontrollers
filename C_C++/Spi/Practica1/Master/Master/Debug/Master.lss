
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007d4  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000067e  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002fb  00000000  00000000  0000107a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001378  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000360  00000000  00000000  000013dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000136  00000000  00000000  0000173c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001872  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  64:	0c 94 95 00 	jmp	0x12a	; 0x12a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <cero_en_bit>:
}


uint8_t cero_en_bit(volatile uint8_t *LUGAR, uint8_t BIT)
{
	return (!(*LUGAR&(1<<BIT)));
  6c:	fc 01       	movw	r30, r24
  6e:	80 81       	ld	r24, Z
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	02 c0       	rjmp	.+4      	; 0x78 <cero_en_bit+0xc>
  74:	95 95       	asr	r25
  76:	87 95       	ror	r24
  78:	6a 95       	dec	r22
  7a:	e2 f7       	brpl	.-8      	; 0x74 <cero_en_bit+0x8>
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	8f 27       	eor	r24, r31
}
  80:	81 70       	andi	r24, 0x01	; 1
  82:	08 95       	ret

00000084 <Traba>:
//*************************************************************************
uint8_t cero_en_bit(volatile uint8_t *LUGAR, uint8_t BIT);
uint8_t uno_en_bit(volatile uint8_t *LUGAR, uint8_t BIT);
//*************************************************************************

void Traba(volatile uint8_t *Lugar, uint8_t Bit){
  84:	0f 93       	push	r16
  86:	1f 93       	push	r17
  88:	cf 93       	push	r28
  8a:	8c 01       	movw	r16, r24
  8c:	c6 2f       	mov	r28, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	2f e7       	ldi	r18, 0x7F	; 127
  90:	88 e3       	ldi	r24, 0x38	; 56
  92:	91 e0       	ldi	r25, 0x01	; 1
  94:	21 50       	subi	r18, 0x01	; 1
  96:	80 40       	sbci	r24, 0x00	; 0
  98:	90 40       	sbci	r25, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <Traba+0x10>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <Traba+0x1a>
  9e:	00 00       	nop
	_delay_ms(50);
	while(cero_en_bit(&*Lugar, Bit)){}
  a0:	6c 2f       	mov	r22, r28
  a2:	c8 01       	movw	r24, r16
  a4:	0e 94 36 00 	call	0x6c	; 0x6c <cero_en_bit>
  a8:	81 11       	cpse	r24, r1
  aa:	fa cf       	rjmp	.-12     	; 0xa0 <Traba+0x1c>
  ac:	2f e7       	ldi	r18, 0x7F	; 127
  ae:	88 e3       	ldi	r24, 0x38	; 56
  b0:	91 e0       	ldi	r25, 0x01	; 1
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <Traba+0x2e>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <Traba+0x38>
  bc:	00 00       	nop
	_delay_ms(50);
}
  be:	cf 91       	pop	r28
  c0:	1f 91       	pop	r17
  c2:	0f 91       	pop	r16
  c4:	08 95       	ret

000000c6 <main>:

int main(void)
{
	DDRB = 0b10110000;
  c6:	80 eb       	ldi	r24, 0xB0	; 176
  c8:	87 bb       	out	0x17, r24	; 23
	DDRA = 0xFF;
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0x00;
  ce:	14 ba       	out	0x14, r1	; 20
	
	PORTC = 0xFF;
  d0:	85 bb       	out	0x15, r24	; 21
	PORTA = 0xFF;	
  d2:	8b bb       	out	0x1b, r24	; 27
	SPSR = 0b00000001;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	8e b9       	out	0x0e, r24	; 14
	SPCR = 0b01010000;
  d8:	80 e5       	ldi	r24, 0x50	; 80
  da:	8d b9       	out	0x0d, r24	; 13
	

	
    while (1) 
    {
		if (cero_en_bit(&PINC, 0))
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	83 e3       	ldi	r24, 0x33	; 51
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 36 00 	call	0x6c	; 0x6c <cero_en_bit>
  e6:	88 23       	and	r24, r24
  e8:	c9 f3       	breq	.-14     	; 0xdc <main+0x16>
		{
			//esclavo 6
			PORTA = 0b10111111;
  ea:	8f eb       	ldi	r24, 0xBF	; 191
  ec:	8b bb       	out	0x1b, r24	; 27
			
			SPDR = 0b11111110;
  ee:	8e ef       	ldi	r24, 0xFE	; 254
  f0:	8f b9       	out	0x0f, r24	; 15
			
			while (cero_en_bit(&SPSR,7)) {}
  f2:	67 e0       	ldi	r22, 0x07	; 7
  f4:	8e e2       	ldi	r24, 0x2E	; 46
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 36 00 	call	0x6c	; 0x6c <cero_en_bit>
  fc:	81 11       	cpse	r24, r1
  fe:	f9 cf       	rjmp	.-14     	; 0xf2 <main+0x2c>
			uint8_t basura= SPDR;
 100:	8f b1       	in	r24, 0x0f	; 15
			
			//esclavo 7
			PORTA = 0X7F;
 102:	8f e7       	ldi	r24, 0x7F	; 127
 104:	8b bb       	out	0x1b, r24	; 27
			
			SPDR = 0b11110000;
 106:	80 ef       	ldi	r24, 0xF0	; 240
 108:	8f b9       	out	0x0f, r24	; 15
			
			while (cero_en_bit(&SPSR,7)) {}
 10a:	67 e0       	ldi	r22, 0x07	; 7
 10c:	8e e2       	ldi	r24, 0x2E	; 46
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 36 00 	call	0x6c	; 0x6c <cero_en_bit>
 114:	81 11       	cpse	r24, r1
 116:	f9 cf       	rjmp	.-14     	; 0x10a <main+0x44>
			
			PORTA = 0XFF;	
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	8b bb       	out	0x1b, r24	; 27
				
			basura= SPDR;
 11c:	8f b1       	in	r24, 0x0f	; 15
			
			Traba(&PINC, 0);
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	83 e3       	ldi	r24, 0x33	; 51
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 42 00 	call	0x84	; 0x84 <Traba>
 128:	d9 cf       	rjmp	.-78     	; 0xdc <main+0x16>

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
