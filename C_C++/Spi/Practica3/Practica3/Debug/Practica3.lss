
Practica3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000054c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  0000054c  000005c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005d2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000604  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f2e  00000000  00000000  00000700  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008dd  00000000  00000000  0000162e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007c3  00000000  00000000  00001f0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b4  00000000  00000000  000026d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000458  00000000  00000000  00002884  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000756  00000000  00000000  00002cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00003432  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
   4:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
   8:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
   c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  10:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  14:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  18:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  1c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  20:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  24:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  28:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  2c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  30:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  34:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  38:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  3c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  40:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  44:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  48:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  4c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  50:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  54:	5c 01       	movw	r10, r24
  56:	72 01       	movw	r14, r4
  58:	72 01       	movw	r14, r4
  5a:	72 01       	movw	r14, r4
  5c:	74 01       	movw	r14, r8
  5e:	72 01       	movw	r14, r4
  60:	5e 01       	movw	r10, r28
  62:	72 01       	movw	r14, r4
  64:	72 01       	movw	r14, r4
  66:	72 01       	movw	r14, r4
  68:	72 01       	movw	r14, r4
  6a:	72 01       	movw	r14, r4
  6c:	72 01       	movw	r14, r4
  6e:	72 01       	movw	r14, r4
  70:	72 01       	movw	r14, r4
  72:	72 01       	movw	r14, r4
  74:	60 01       	movw	r12, r0
  76:	72 01       	movw	r14, r4
  78:	72 01       	movw	r14, r4
  7a:	72 01       	movw	r14, r4
  7c:	62 01       	movw	r12, r4
  7e:	72 01       	movw	r14, r4
  80:	64 01       	movw	r12, r8
  82:	72 01       	movw	r14, r4
  84:	72 01       	movw	r14, r4
  86:	72 01       	movw	r14, r4
  88:	72 01       	movw	r14, r4
  8a:	72 01       	movw	r14, r4
  8c:	72 01       	movw	r14, r4
  8e:	72 01       	movw	r14, r4
  90:	72 01       	movw	r14, r4
  92:	72 01       	movw	r14, r4
  94:	66 01       	movw	r12, r12
  96:	72 01       	movw	r14, r4
  98:	72 01       	movw	r14, r4
  9a:	72 01       	movw	r14, r4
  9c:	68 01       	movw	r12, r16
  9e:	72 01       	movw	r14, r4
  a0:	6a 01       	movw	r12, r20
  a2:	72 01       	movw	r14, r4
  a4:	72 01       	movw	r14, r4
  a6:	72 01       	movw	r14, r4
  a8:	72 01       	movw	r14, r4
  aa:	72 01       	movw	r14, r4
  ac:	72 01       	movw	r14, r4
  ae:	72 01       	movw	r14, r4
  b0:	72 01       	movw	r14, r4
  b2:	72 01       	movw	r14, r4
  b4:	6c 01       	movw	r12, r24
  b6:	72 01       	movw	r14, r4
  b8:	72 01       	movw	r14, r4
  ba:	72 01       	movw	r14, r4
  bc:	6e 01       	movw	r12, r28
  be:	72 01       	movw	r14, r4
  c0:	70 01       	movw	r14, r0

000000c2 <__ctors_end>:
  c2:	11 24       	eor	r1, r1
  c4:	1f be       	out	0x3f, r1	; 63
  c6:	cf e5       	ldi	r28, 0x5F	; 95
  c8:	d4 e0       	ldi	r29, 0x04	; 4
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
  ce:	10 e0       	ldi	r17, 0x00	; 0
  d0:	a0 e6       	ldi	r26, 0x60	; 96
  d2:	b0 e0       	ldi	r27, 0x00	; 0
  d4:	ec e4       	ldi	r30, 0x4C	; 76
  d6:	f5 e0       	ldi	r31, 0x05	; 5
  d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
  da:	05 90       	lpm	r0, Z+
  dc:	0d 92       	st	X+, r0
  de:	a2 37       	cpi	r26, 0x72	; 114
  e0:	b1 07       	cpc	r27, r17
  e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>
  e4:	0e 94 b5 01 	call	0x36a	; 0x36a <main>
  e8:	0c 94 a4 02 	jmp	0x548	; 0x548 <_exit>

000000ec <__bad_interrupt>:
  ec:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f0 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  f0:	85 b3       	in	r24, 0x15	; 21
  f2:	80 64       	ori	r24, 0x40	; 64
  f4:	85 bb       	out	0x15, r24	; 21
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <toggle_e+0x8>
  f8:	85 b3       	in	r24, 0x15	; 21
  fa:	8f 7b       	andi	r24, 0xBF	; 191
  fc:	85 bb       	out	0x15, r24	; 21
  fe:	08 95       	ret

00000100 <lcd_write>:
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	d8 2f       	mov	r29, r24
 106:	66 23       	and	r22, r22
 108:	21 f0       	breq	.+8      	; 0x112 <lcd_write+0x12>
 10a:	85 b3       	in	r24, 0x15	; 21
 10c:	80 61       	ori	r24, 0x10	; 16
 10e:	85 bb       	out	0x15, r24	; 21
 110:	03 c0       	rjmp	.+6      	; 0x118 <lcd_write+0x18>
 112:	85 b3       	in	r24, 0x15	; 21
 114:	8f 7e       	andi	r24, 0xEF	; 239
 116:	85 bb       	out	0x15, r24	; 21
 118:	85 b3       	in	r24, 0x15	; 21
 11a:	8f 7d       	andi	r24, 0xDF	; 223
 11c:	85 bb       	out	0x15, r24	; 21
 11e:	84 b3       	in	r24, 0x14	; 20
 120:	8f 60       	ori	r24, 0x0F	; 15
 122:	84 bb       	out	0x14, r24	; 20
 124:	c5 b3       	in	r28, 0x15	; 21
 126:	c0 7f       	andi	r28, 0xF0	; 240
 128:	8d 2f       	mov	r24, r29
 12a:	82 95       	swap	r24
 12c:	8f 70       	andi	r24, 0x0F	; 15
 12e:	8c 2b       	or	r24, r28
 130:	85 bb       	out	0x15, r24	; 21
 132:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 136:	df 70       	andi	r29, 0x0F	; 15
 138:	dc 2b       	or	r29, r28
 13a:	d5 bb       	out	0x15, r29	; 21
 13c:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 140:	cf 60       	ori	r28, 0x0F	; 15
 142:	c5 bb       	out	0x15, r28	; 21
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <lcd_read>:
 14a:	88 23       	and	r24, r24
 14c:	21 f0       	breq	.+8      	; 0x156 <lcd_read+0xc>
 14e:	85 b3       	in	r24, 0x15	; 21
 150:	80 61       	ori	r24, 0x10	; 16
 152:	85 bb       	out	0x15, r24	; 21
 154:	03 c0       	rjmp	.+6      	; 0x15c <lcd_read+0x12>
 156:	85 b3       	in	r24, 0x15	; 21
 158:	8f 7e       	andi	r24, 0xEF	; 239
 15a:	85 bb       	out	0x15, r24	; 21
 15c:	85 b3       	in	r24, 0x15	; 21
 15e:	80 62       	ori	r24, 0x20	; 32
 160:	85 bb       	out	0x15, r24	; 21
 162:	84 b3       	in	r24, 0x14	; 20
 164:	80 7f       	andi	r24, 0xF0	; 240
 166:	84 bb       	out	0x14, r24	; 20
 168:	85 b3       	in	r24, 0x15	; 21
 16a:	80 64       	ori	r24, 0x40	; 64
 16c:	85 bb       	out	0x15, r24	; 21
 16e:	00 c0       	rjmp	.+0      	; 0x170 <lcd_read+0x26>
 170:	93 b3       	in	r25, 0x13	; 19
 172:	92 95       	swap	r25
 174:	90 7f       	andi	r25, 0xF0	; 240
 176:	85 b3       	in	r24, 0x15	; 21
 178:	8f 7b       	andi	r24, 0xBF	; 191
 17a:	85 bb       	out	0x15, r24	; 21
 17c:	00 c0       	rjmp	.+0      	; 0x17e <lcd_read+0x34>
 17e:	85 b3       	in	r24, 0x15	; 21
 180:	80 64       	ori	r24, 0x40	; 64
 182:	85 bb       	out	0x15, r24	; 21
 184:	00 c0       	rjmp	.+0      	; 0x186 <lcd_read+0x3c>
 186:	83 b3       	in	r24, 0x13	; 19
 188:	8f 70       	andi	r24, 0x0F	; 15
 18a:	25 b3       	in	r18, 0x15	; 21
 18c:	2f 7b       	andi	r18, 0xBF	; 191
 18e:	25 bb       	out	0x15, r18	; 21
 190:	89 2b       	or	r24, r25
 192:	08 95       	ret

00000194 <lcd_waitbusy>:
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_read>
 19a:	88 23       	and	r24, r24
 19c:	dc f3       	brlt	.-10     	; 0x194 <lcd_waitbusy>
 19e:	82 e0       	ldi	r24, 0x02	; 2
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_waitbusy+0xe>
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_read>
 1ac:	08 95       	ret

000001ae <lcd_command>:
 1ae:	cf 93       	push	r28
 1b0:	c8 2f       	mov	r28, r24
 1b2:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_waitbusy>
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	8c 2f       	mov	r24, r28
 1ba:	0e 94 80 00 	call	0x100	; 0x100 <lcd_write>
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <lcd_gotoxy>:
 1c2:	61 11       	cpse	r22, r1
 1c4:	04 c0       	rjmp	.+8      	; 0x1ce <lcd_gotoxy+0xc>
 1c6:	80 58       	subi	r24, 0x80	; 128
 1c8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
 1cc:	08 95       	ret
 1ce:	80 54       	subi	r24, 0x40	; 64
 1d0:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
 1d4:	08 95       	ret

000001d6 <lcd_clrscr>:
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
 1dc:	08 95       	ret

000001de <lcd_putc>:
 1de:	cf 93       	push	r28
 1e0:	c8 2f       	mov	r28, r24
 1e2:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_waitbusy>
 1e6:	ca 30       	cpi	r28, 0x0A	; 10
 1e8:	49 f4       	brne	.+18     	; 0x1fc <lcd_putc+0x1e>
 1ea:	80 34       	cpi	r24, 0x40	; 64
 1ec:	10 f4       	brcc	.+4      	; 0x1f2 <lcd_putc+0x14>
 1ee:	80 e4       	ldi	r24, 0x40	; 64
 1f0:	01 c0       	rjmp	.+2      	; 0x1f4 <lcd_putc+0x16>
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	80 58       	subi	r24, 0x80	; 128
 1f6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
 1fa:	04 c0       	rjmp	.+8      	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>
 1fc:	61 e0       	ldi	r22, 0x01	; 1
 1fe:	8c 2f       	mov	r24, r28
 200:	0e 94 80 00 	call	0x100	; 0x100 <lcd_write>
 204:	cf 91       	pop	r28
 206:	08 95       	ret

00000208 <lcd_puts>:
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	fc 01       	movw	r30, r24
 20e:	03 c0       	rjmp	.+6      	; 0x216 <lcd_puts+0xe>
 210:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_putc>
 214:	fe 01       	movw	r30, r28
 216:	ef 01       	movw	r28, r30
 218:	21 96       	adiw	r28, 0x01	; 1
 21a:	80 81       	ld	r24, Z
 21c:	81 11       	cpse	r24, r1
 21e:	f8 cf       	rjmp	.-16     	; 0x210 <lcd_puts+0x8>
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	08 95       	ret

00000226 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 226:	1f 93       	push	r17
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	18 2f       	mov	r17, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 22e:	84 b3       	in	r24, 0x14	; 20
 230:	8f 67       	ori	r24, 0x7F	; 127
 232:	84 bb       	out	0x14, r24	; 20
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 234:	80 e8       	ldi	r24, 0x80	; 128
 236:	9e e3       	ldi	r25, 0x3E	; 62
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <lcd_init+0x12>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 23c:	85 b3       	in	r24, 0x15	; 21
 23e:	82 60       	ori	r24, 0x02	; 2
 240:	85 bb       	out	0x15, r24	; 21
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 242:	85 b3       	in	r24, 0x15	; 21
 244:	81 60       	ori	r24, 0x01	; 1
 246:	85 bb       	out	0x15, r24	; 21
    lcd_e_toggle();
 248:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 24c:	80 e8       	ldi	r24, 0x80	; 128
 24e:	93 e1       	ldi	r25, 0x13	; 19
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <lcd_init+0x2a>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 254:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 258:	c0 e4       	ldi	r28, 0x40	; 64
 25a:	d0 e0       	ldi	r29, 0x00	; 0
 25c:	ce 01       	movw	r24, r28
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <lcd_init+0x38>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 262:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 266:	ce 01       	movw	r24, r28
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <lcd_init+0x42>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 26c:	85 b3       	in	r24, 0x15	; 21
 26e:	8e 7f       	andi	r24, 0xFE	; 254
 270:	85 bb       	out	0x15, r24	; 21
    lcd_e_toggle();
 272:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 276:	21 97       	sbiw	r28, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <lcd_init+0x50>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 27a:	88 e2       	ldi	r24, 0x28	; 40
 27c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 280:	88 e0       	ldi	r24, 0x08	; 8
 282:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 286:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 28a:	86 e0       	ldi	r24, 0x06	; 6
 28c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 290:	81 2f       	mov	r24, r17
 292:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>

}/* lcd_init */
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	1f 91       	pop	r17
 29c:	08 95       	ret

0000029e <leer2>:
		}
	}
}

char leer2(char * n){
	switch(*n){
 29e:	dc 01       	movw	r26, r24
 2a0:	ec 91       	ld	r30, X
 2a2:	8e 2f       	mov	r24, r30
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	fc 01       	movw	r30, r24
 2a8:	37 97       	sbiw	r30, 0x07	; 7
 2aa:	e7 33       	cpi	r30, 0x37	; 55
 2ac:	f1 05       	cpc	r31, r1
 2ae:	d0 f4       	brcc	.+52     	; 0x2e4 <leer2+0x46>
 2b0:	e6 5d       	subi	r30, 0xD6	; 214
 2b2:	ff 4f       	sbci	r31, 0xFF	; 255
 2b4:	0c 94 84 02 	jmp	0x508	; 0x508 <__tablejump2__>
		case 0x07:{
			return 1;
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	08 95       	ret
		}
		case 0x0B:{
			return 2;
		}
		case 0x0D:{
			return 3;
 2bc:	83 e0       	ldi	r24, 0x03	; 3
 2be:	08 95       	ret
		}
		case 0x17:{
			return 4;
 2c0:	84 e0       	ldi	r24, 0x04	; 4
 2c2:	08 95       	ret
		}
		case 0x1B:{
			return 5;
 2c4:	85 e0       	ldi	r24, 0x05	; 5
 2c6:	08 95       	ret
		}
		case 0x1D:{
			return 6;
 2c8:	86 e0       	ldi	r24, 0x06	; 6
 2ca:	08 95       	ret
		}
		case 0x27:{
			return 7;
 2cc:	87 e0       	ldi	r24, 0x07	; 7
 2ce:	08 95       	ret
		}
		case 0x2B:{
			return 8;
 2d0:	88 e0       	ldi	r24, 0x08	; 8
 2d2:	08 95       	ret
		}
		case 0x2D:{
			return 9;
 2d4:	89 e0       	ldi	r24, 0x09	; 9
 2d6:	08 95       	ret
		}
		case 0x37:{
			//return 10;
			return 17;
 2d8:	81 e1       	ldi	r24, 0x11	; 17
 2da:	08 95       	ret
		}
		case 0x3B:{
			return 0;
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	08 95       	ret
		}
		case 0x3D:{
			//return 11;
			return 10;
 2e0:	8a e0       	ldi	r24, 0x0A	; 10
 2e2:	08 95       	ret
		}
		default:{
			return 17;
 2e4:	81 e1       	ldi	r24, 0x11	; 17
 2e6:	08 95       	ret
	switch(*n){
		case 0x07:{
			return 1;
		}
		case 0x0B:{
			return 2;
 2e8:	82 e0       	ldi	r24, 0x02	; 2
		}
		default:{
			return 17;
		}
	}
}
 2ea:	08 95       	ret

000002ec <hacerse_menso>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ec:	87 ea       	ldi	r24, 0xA7	; 167
 2ee:	91 e6       	ldi	r25, 0x61	; 97
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <hacerse_menso+0x4>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <hacerse_menso+0xa>
 2f6:	00 00       	nop

void hacerse_menso(){
	_delay_ms(50);
	
	while(1){
		if((PINA&0x0F) == 0x0F){ break;}
 2f8:	89 b3       	in	r24, 0x19	; 25
 2fa:	8f 70       	andi	r24, 0x0F	; 15
 2fc:	8f 30       	cpi	r24, 0x0F	; 15
 2fe:	e1 f7       	brne	.-8      	; 0x2f8 <hacerse_menso+0xc>
 300:	87 ea       	ldi	r24, 0xA7	; 167
 302:	91 e6       	ldi	r25, 0x61	; 97
 304:	01 97       	sbiw	r24, 0x01	; 1
 306:	f1 f7       	brne	.-4      	; 0x304 <hacerse_menso+0x18>
 308:	00 c0       	rjmp	.+0      	; 0x30a <hacerse_menso+0x1e>
 30a:	00 00       	nop
 30c:	08 95       	ret

0000030e <leer1>:
	}
	
	
}

char leer1(){
 30e:	1f 93       	push	r17
 310:	cf 93       	push	r28
 312:	df 93       	push	r29
	register char aux=0;
	while(1){
		
		for(char i=0; i<4; i++){
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	22 c0       	rjmp	.+68     	; 0x35c <leer1+0x4e>
			PORTA=0xFF^(1<<(7-i)); //Se le hace XOR a los bits para apagar la fila que queremos
 318:	c9 2f       	mov	r28, r25
 31a:	d0 e0       	ldi	r29, 0x00	; 0
 31c:	47 e0       	ldi	r20, 0x07	; 7
 31e:	50 e0       	ldi	r21, 0x00	; 0
 320:	4c 1b       	sub	r20, r28
 322:	5d 0b       	sbc	r21, r29
 324:	21 e0       	ldi	r18, 0x01	; 1
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	02 c0       	rjmp	.+4      	; 0x32e <leer1+0x20>
 32a:	22 0f       	add	r18, r18
 32c:	33 1f       	adc	r19, r19
 32e:	4a 95       	dec	r20
 330:	e2 f7       	brpl	.-8      	; 0x32a <leer1+0x1c>
 332:	20 95       	com	r18
 334:	2b bb       	out	0x1b, r18	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 336:	00 c0       	rjmp	.+0      	; 0x338 <leer1+0x2a>
			_delay_us(1);
			aux=PINA;
 338:	19 b3       	in	r17, 0x19	; 25
			if((aux & 0x0F) != 0x0F){
 33a:	81 2f       	mov	r24, r17
 33c:	8f 70       	andi	r24, 0x0F	; 15
 33e:	8f 30       	cpi	r24, 0x0F	; 15
 340:	61 f0       	breq	.+24     	; 0x35a <leer1+0x4c>
				hacerse_menso();
 342:	0e 94 76 01 	call	0x2ec	; 0x2ec <hacerse_menso>
				return (aux & 0x0F) | (i<<4);
 346:	c2 95       	swap	r28
 348:	d2 95       	swap	r29
 34a:	d0 7f       	andi	r29, 0xF0	; 240
 34c:	dc 27       	eor	r29, r28
 34e:	c0 7f       	andi	r28, 0xF0	; 240
 350:	dc 27       	eor	r29, r28
 352:	1f 70       	andi	r17, 0x0F	; 15
 354:	8c 2f       	mov	r24, r28
 356:	81 2b       	or	r24, r17
 358:	04 c0       	rjmp	.+8      	; 0x362 <leer1+0x54>

char leer1(){
	register char aux=0;
	while(1){
		
		for(char i=0; i<4; i++){
 35a:	9f 5f       	subi	r25, 0xFF	; 255
 35c:	94 30       	cpi	r25, 0x04	; 4
 35e:	e0 f2       	brcs	.-72     	; 0x318 <leer1+0xa>
 360:	d9 cf       	rjmp	.-78     	; 0x314 <leer1+0x6>
				hacerse_menso();
				return (aux & 0x0F) | (i<<4);
			}
		}
	}
}
 362:	df 91       	pop	r29
 364:	cf 91       	pop	r28
 366:	1f 91       	pop	r17
 368:	08 95       	ret

0000036a <main>:

void hacerse_menso();
char leer1();
char leer2(char*);

int main(){
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	1f 92       	push	r1
 370:	cd b7       	in	r28, 0x3d	; 61
 372:	de b7       	in	r29, 0x3e	; 62
	//Teclado
	DDRA=0xF0; //salidas__entradas
 374:	80 ef       	ldi	r24, 0xF0	; 240
 376:	8a bb       	out	0x1a, r24	; 26
	PORTA=0xFF; // 5V__Pullups
 378:	8f ef       	ldi	r24, 0xFF	; 255
 37a:	8b bb       	out	0x1b, r24	; 27
	
	//LCD
	DDRC=0xFF;
 37c:	84 bb       	out	0x14, r24	; 20
	PORTC=0;
 37e:	15 ba       	out	0x15, r1	; 21
	
	//mosi/miso/etc
	DDRB=0xFF;
 380:	87 bb       	out	0x17, r24	; 23
	PORTB=0xFF;
 382:	88 bb       	out	0x18, r24	; 24
	
	SPSR=0b10000001; // f=1/2
 384:	81 e8       	ldi	r24, 0x81	; 129
 386:	8e b9       	out	0x0e, r24	; 14
	SPCR=0b01010000;
 388:	80 e5       	ldi	r24, 0x50	; 80
 38a:	8d b9       	out	0x0d, r24	; 13
	
	lcd_init(LCD_DISP_ON);
 38c:	8c e0       	ldi	r24, 0x0C	; 12
 38e:	0e 94 13 01 	call	0x226	; 0x226 <lcd_init>
	unsigned char v1,v2;
	
	while(1){
		
		v=0;
		lcd_clrscr();
 392:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_clrscr>
		lcd_puts("Selct Vlt");
 396:	80 e6       	ldi	r24, 0x60	; 96
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	0e 94 04 01 	call	0x208	; 0x208 <lcd_puts>
		lcd_gotoxy(0,1);
 39e:	61 e0       	ldi	r22, 0x01	; 1
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_gotoxy>
		
		//Leemos centenas
		do{
			n=leer1();
 3a6:	0e 94 87 01 	call	0x30e	; 0x30e <leer1>
 3aa:	89 83       	std	Y+1, r24	; 0x01
			n=leer2(&n);
 3ac:	ce 01       	movw	r24, r28
 3ae:	01 96       	adiw	r24, 0x01	; 1
 3b0:	0e 94 4f 01 	call	0x29e	; 0x29e <leer2>
 3b4:	89 83       	std	Y+1, r24	; 0x01
		}while(n>4);
 3b6:	85 30       	cpi	r24, 0x05	; 5
 3b8:	b0 f7       	brcc	.-20     	; 0x3a6 <main+0x3c>
		
		lcd_putc(n+48);
 3ba:	80 5d       	subi	r24, 0xD0	; 208
 3bc:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_putc>
		//_delay_ms(500);
		lcd_putc('.');
 3c0:	8e e2       	ldi	r24, 0x2E	; 46
 3c2:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_putc>
		v+=100*n;
 3c6:	c9 80       	ldd	r12, Y+1	; 0x01
 3c8:	24 e6       	ldi	r18, 0x64	; 100
 3ca:	c2 9e       	mul	r12, r18
 3cc:	60 01       	movw	r12, r0
 3ce:	11 24       	eor	r1, r1
 3d0:	0d 2c       	mov	r0, r13
 3d2:	00 0c       	add	r0, r0
 3d4:	ee 08       	sbc	r14, r14
 3d6:	ff 08       	sbc	r15, r15
		
		//Leemos decenas
		do{
			n=leer1();
 3d8:	0e 94 87 01 	call	0x30e	; 0x30e <leer1>
 3dc:	89 83       	std	Y+1, r24	; 0x01
			n=leer2(&n);
 3de:	ce 01       	movw	r24, r28
 3e0:	01 96       	adiw	r24, 0x01	; 1
 3e2:	0e 94 4f 01 	call	0x29e	; 0x29e <leer2>
 3e6:	89 83       	std	Y+1, r24	; 0x01
		}while(n>9);
 3e8:	8a 30       	cpi	r24, 0x0A	; 10
 3ea:	b0 f7       	brcc	.-20     	; 0x3d8 <main+0x6e>
		lcd_putc(n+48);
 3ec:	80 5d       	subi	r24, 0xD0	; 208
 3ee:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_putc>
		v+=10*n;
 3f2:	49 81       	ldd	r20, Y+1	; 0x01
 3f4:	50 e0       	ldi	r21, 0x00	; 0
 3f6:	ca 01       	movw	r24, r20
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	44 0f       	add	r20, r20
 3fe:	55 1f       	adc	r21, r21
 400:	44 0f       	add	r20, r20
 402:	55 1f       	adc	r21, r21
 404:	44 0f       	add	r20, r20
 406:	55 1f       	adc	r21, r21
 408:	84 0f       	add	r24, r20
 40a:	95 1f       	adc	r25, r21
 40c:	09 2e       	mov	r0, r25
 40e:	00 0c       	add	r0, r0
 410:	aa 0b       	sbc	r26, r26
 412:	bb 0b       	sbc	r27, r27
 414:	c8 0e       	add	r12, r24
 416:	d9 1e       	adc	r13, r25
 418:	ea 1e       	adc	r14, r26
 41a:	fb 1e       	adc	r15, r27
		
		do{
			n=leer1();
 41c:	0e 94 87 01 	call	0x30e	; 0x30e <leer1>
 420:	89 83       	std	Y+1, r24	; 0x01
			n=leer2(&n);
 422:	ce 01       	movw	r24, r28
 424:	01 96       	adiw	r24, 0x01	; 1
 426:	0e 94 4f 01 	call	0x29e	; 0x29e <leer2>
 42a:	89 83       	std	Y+1, r24	; 0x01
		}while(n>9);
 42c:	8a 30       	cpi	r24, 0x0A	; 10
 42e:	b0 f7       	brcc	.-20     	; 0x41c <__DATA_REGION_LENGTH__+0x1c>
		lcd_putc(n+48);
 430:	80 5d       	subi	r24, 0xD0	; 208
 432:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_putc>
		v+=n;
 436:	89 81       	ldd	r24, Y+1	; 0x01
 438:	a7 01       	movw	r20, r14
 43a:	96 01       	movw	r18, r12
 43c:	28 0f       	add	r18, r24
 43e:	31 1d       	adc	r19, r1
 440:	41 1d       	adc	r20, r1
 442:	51 1d       	adc	r21, r1
		
		v=(v*255)/500;
 444:	af ef       	ldi	r26, 0xFF	; 255
 446:	b0 e0       	ldi	r27, 0x00	; 0
 448:	0e 94 8a 02 	call	0x514	; 0x514 <__muluhisi3>
 44c:	24 ef       	ldi	r18, 0xF4	; 244
 44e:	31 e0       	ldi	r19, 0x01	; 1
 450:	40 e0       	ldi	r20, 0x00	; 0
 452:	50 e0       	ldi	r21, 0x00	; 0
 454:	0e 94 62 02 	call	0x4c4	; 0x4c4 <__udivmodsi4>
		//v=(v<<6);
		v1=(unsigned char) (v>>2);
 458:	49 01       	movw	r8, r18
 45a:	5a 01       	movw	r10, r20
 45c:	b6 94       	lsr	r11
 45e:	a7 94       	ror	r10
 460:	97 94       	ror	r9
 462:	87 94       	ror	r8
 464:	b6 94       	lsr	r11
 466:	a7 94       	ror	r10
 468:	97 94       	ror	r9
 46a:	87 94       	ror	r8
		v2=(unsigned char) (v<<6);
 46c:	f2 2e       	mov	r15, r18
 46e:	ff 0c       	add	r15, r15
 470:	ff 0c       	add	r15, r15
 472:	ff 0c       	add	r15, r15
 474:	ff 0c       	add	r15, r15
 476:	ff 0c       	add	r15, r15
 478:	ff 0c       	add	r15, r15
		//v1=0b00111110;
		//v2=0b11000000;
		
		do{
			n=leer1();
 47a:	0e 94 87 01 	call	0x30e	; 0x30e <leer1>
 47e:	89 83       	std	Y+1, r24	; 0x01
			n=leer2(&n);
 480:	ce 01       	movw	r24, r28
 482:	01 96       	adiw	r24, 0x01	; 1
 484:	0e 94 4f 01 	call	0x29e	; 0x29e <leer2>
 488:	89 83       	std	Y+1, r24	; 0x01
		}while(n!=10); //Ya para mandarlo al DAC
 48a:	8a 30       	cpi	r24, 0x0A	; 10
 48c:	b1 f7       	brne	.-20     	; 0x47a <__stack+0x1b>
		
		//Parte del SPI
		PORTB&=0xEF; //Seleccionamos el esclavo
 48e:	88 b3       	in	r24, 0x18	; 24
 490:	8f 7e       	andi	r24, 0xEF	; 239
 492:	88 bb       	out	0x18, r24	; 24
		SPDR=v1;
 494:	8f b8       	out	0x0f, r8	; 15
		while((SPSR&0x80)==0){
 496:	77 9b       	sbis	0x0e, 7	; 14
 498:	fe cf       	rjmp	.-4      	; 0x496 <__stack+0x37>
			//Nadotota
		}
		SPDR=v2;
 49a:	ff b8       	out	0x0f, r15	; 15
		while((SPSR&0x80)==0){
 49c:	77 9b       	sbis	0x0e, 7	; 14
 49e:	fe cf       	rjmp	.-4      	; 0x49c <__stack+0x3d>
			//Nadototota
		}
		PORTB=0xFF; //Le dejamos de hablar
 4a0:	8f ef       	ldi	r24, 0xFF	; 255
 4a2:	88 bb       	out	0x18, r24	; 24
		
		lcd_clrscr();
 4a4:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_clrscr>
		lcd_puts("Listo!");
 4a8:	8a e6       	ldi	r24, 0x6A	; 106
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	0e 94 04 01 	call	0x208	; 0x208 <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4b0:	8f e3       	ldi	r24, 0x3F	; 63
 4b2:	9d e0       	ldi	r25, 0x0D	; 13
 4b4:	23 e0       	ldi	r18, 0x03	; 3
 4b6:	81 50       	subi	r24, 0x01	; 1
 4b8:	90 40       	sbci	r25, 0x00	; 0
 4ba:	20 40       	sbci	r18, 0x00	; 0
 4bc:	e1 f7       	brne	.-8      	; 0x4b6 <__stack+0x57>
 4be:	00 c0       	rjmp	.+0      	; 0x4c0 <__stack+0x61>
 4c0:	00 00       	nop
 4c2:	67 cf       	rjmp	.-306    	; 0x392 <main+0x28>

000004c4 <__udivmodsi4>:
 4c4:	a1 e2       	ldi	r26, 0x21	; 33
 4c6:	1a 2e       	mov	r1, r26
 4c8:	aa 1b       	sub	r26, r26
 4ca:	bb 1b       	sub	r27, r27
 4cc:	fd 01       	movw	r30, r26
 4ce:	0d c0       	rjmp	.+26     	; 0x4ea <__udivmodsi4_ep>

000004d0 <__udivmodsi4_loop>:
 4d0:	aa 1f       	adc	r26, r26
 4d2:	bb 1f       	adc	r27, r27
 4d4:	ee 1f       	adc	r30, r30
 4d6:	ff 1f       	adc	r31, r31
 4d8:	a2 17       	cp	r26, r18
 4da:	b3 07       	cpc	r27, r19
 4dc:	e4 07       	cpc	r30, r20
 4de:	f5 07       	cpc	r31, r21
 4e0:	20 f0       	brcs	.+8      	; 0x4ea <__udivmodsi4_ep>
 4e2:	a2 1b       	sub	r26, r18
 4e4:	b3 0b       	sbc	r27, r19
 4e6:	e4 0b       	sbc	r30, r20
 4e8:	f5 0b       	sbc	r31, r21

000004ea <__udivmodsi4_ep>:
 4ea:	66 1f       	adc	r22, r22
 4ec:	77 1f       	adc	r23, r23
 4ee:	88 1f       	adc	r24, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	1a 94       	dec	r1
 4f4:	69 f7       	brne	.-38     	; 0x4d0 <__udivmodsi4_loop>
 4f6:	60 95       	com	r22
 4f8:	70 95       	com	r23
 4fa:	80 95       	com	r24
 4fc:	90 95       	com	r25
 4fe:	9b 01       	movw	r18, r22
 500:	ac 01       	movw	r20, r24
 502:	bd 01       	movw	r22, r26
 504:	cf 01       	movw	r24, r30
 506:	08 95       	ret

00000508 <__tablejump2__>:
 508:	ee 0f       	add	r30, r30
 50a:	ff 1f       	adc	r31, r31
 50c:	05 90       	lpm	r0, Z+
 50e:	f4 91       	lpm	r31, Z
 510:	e0 2d       	mov	r30, r0
 512:	09 94       	ijmp

00000514 <__muluhisi3>:
 514:	0e 94 95 02 	call	0x52a	; 0x52a <__umulhisi3>
 518:	a5 9f       	mul	r26, r21
 51a:	90 0d       	add	r25, r0
 51c:	b4 9f       	mul	r27, r20
 51e:	90 0d       	add	r25, r0
 520:	a4 9f       	mul	r26, r20
 522:	80 0d       	add	r24, r0
 524:	91 1d       	adc	r25, r1
 526:	11 24       	eor	r1, r1
 528:	08 95       	ret

0000052a <__umulhisi3>:
 52a:	a2 9f       	mul	r26, r18
 52c:	b0 01       	movw	r22, r0
 52e:	b3 9f       	mul	r27, r19
 530:	c0 01       	movw	r24, r0
 532:	a3 9f       	mul	r26, r19
 534:	70 0d       	add	r23, r0
 536:	81 1d       	adc	r24, r1
 538:	11 24       	eor	r1, r1
 53a:	91 1d       	adc	r25, r1
 53c:	b2 9f       	mul	r27, r18
 53e:	70 0d       	add	r23, r0
 540:	81 1d       	adc	r24, r1
 542:	11 24       	eor	r1, r1
 544:	91 1d       	adc	r25, r1
 546:	08 95       	ret

00000548 <_exit>:
 548:	f8 94       	cli

0000054a <__stop_program>:
 54a:	ff cf       	rjmp	.-2      	; 0x54a <__stop_program>
