
Practica_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001f6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000093d  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a0  00000000  00000000  00000be9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036f  00000000  00000000  00001289  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  000015f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000392  00000000  00000000  0000167c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000206  00000000  00000000  00001a0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001c14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  64:	0c 94 cf 00 	jmp	0x19e	; 0x19e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Swap>:
uint8_t uno_en_bit(volatile uint8_t *LUGAR, uint8_t BIT);
//*************************************************************************
#define conservar_dec 0xF0
#define conservar_uni 0x0F
void Swap(uint8_t *reg_sum, uint8_t *reg_Diplay){
	uint8_t Decenas=(*reg_sum>>4);
  6c:	fc 01       	movw	r30, r24
  6e:	80 81       	ld	r24, Z
  70:	98 2f       	mov	r25, r24
  72:	92 95       	swap	r25
  74:	9f 70       	andi	r25, 0x0F	; 15
	uint8_t Unidades=(*reg_sum<<4);
  76:	82 95       	swap	r24
  78:	80 7f       	andi	r24, 0xF0	; 240
	*reg_Diplay&=0;
	*reg_Diplay|=Decenas;
	*reg_Diplay|=Unidades;
  7a:	89 2b       	or	r24, r25
  7c:	fb 01       	movw	r30, r22
  7e:	80 83       	st	Z, r24
  80:	08 95       	ret

00000082 <Sumar>:
}
void Sumar(uint8_t *reg_sum){
  82:	fc 01       	movw	r30, r24
	uint8_t aux=(*reg_sum<<4);
  84:	90 81       	ld	r25, Z
  86:	89 2f       	mov	r24, r25
  88:	82 95       	swap	r24
  8a:	80 7f       	andi	r24, 0xF0	; 240
	if(aux==0x90){
  8c:	80 39       	cpi	r24, 0x90	; 144
  8e:	21 f4       	brne	.+8      	; 0x98 <Sumar+0x16>
		*reg_sum&= conservar_dec;
  90:	90 7f       	andi	r25, 0xF0	; 240
		*reg_sum+=0x10;
  92:	90 5f       	subi	r25, 0xF0	; 240
  94:	90 83       	st	Z, r25
  96:	08 95       	ret
	}
	else{
		*reg_sum+=1;
  98:	9f 5f       	subi	r25, 0xFF	; 255
  9a:	90 83       	st	Z, r25
  9c:	08 95       	ret

0000009e <Restar>:
	}
}

void Restar(uint8_t *reg_sum){
  9e:	fc 01       	movw	r30, r24
	uint8_t aux=(*reg_sum<<4);
  a0:	90 81       	ld	r25, Z
  a2:	89 2f       	mov	r24, r25
  a4:	82 95       	swap	r24
  a6:	80 7f       	andi	r24, 0xF0	; 240
	if(aux==0x00){
  a8:	21 f4       	brne	.+8      	; 0xb2 <Restar+0x14>
		*reg_sum&= conservar_dec;
  aa:	90 7f       	andi	r25, 0xF0	; 240
		*reg_sum-=0x10;
		*reg_sum+=0x09;
  ac:	97 50       	subi	r25, 0x07	; 7
  ae:	90 83       	st	Z, r25
  b0:	08 95       	ret
	}
	else{
		*reg_sum-=1;
  b2:	91 50       	subi	r25, 0x01	; 1
  b4:	90 83       	st	Z, r25
  b6:	08 95       	ret

000000b8 <cero_en_bit>:



uint8_t cero_en_bit(volatile uint8_t *LUGAR, uint8_t BIT)
{
	return (!(*LUGAR&(1<<BIT)));
  b8:	fc 01       	movw	r30, r24
  ba:	80 81       	ld	r24, Z
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	02 c0       	rjmp	.+4      	; 0xc4 <cero_en_bit+0xc>
  c0:	95 95       	asr	r25
  c2:	87 95       	ror	r24
  c4:	6a 95       	dec	r22
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <cero_en_bit+0x8>
  c8:	f1 e0       	ldi	r31, 0x01	; 1
  ca:	8f 27       	eor	r24, r31
}
  cc:	81 70       	andi	r24, 0x01	; 1
  ce:	08 95       	ret

000000d0 <main>:
	}
}


int main(void)
{
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	00 d0       	rcall	.+0      	; 0xd6 <main+0x6>
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
	DDRA|=~(0x81<<0);
  da:	8a b3       	in	r24, 0x1a	; 26
  dc:	8e 67       	ori	r24, 0x7E	; 126
  de:	8a bb       	out	0x1a, r24	; 26
	PORTA|=(0x81<<0);
  e0:	8b b3       	in	r24, 0x1b	; 27
  e2:	81 68       	ori	r24, 0x81	; 129
  e4:	8b bb       	out	0x1b, r24	; 27
	
	DDRC|=~(0<<0);
  e6:	84 b3       	in	r24, 0x14	; 20
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	84 bb       	out	0x14, r24	; 20
	PORTC|=(0<<0);
  ec:	85 b3       	in	r24, 0x15	; 21
  ee:	85 bb       	out	0x15, r24	; 21
	uint8_t reg_suma=0;
  f0:	19 82       	std	Y+1, r1	; 0x01
	uint8_t reg_Display=0;
  f2:	1a 82       	std	Y+2, r1	; 0x02
	
    /* Codigo principal */
    while (1) 
    {
		if(cero_en_bit(&PINA,0)){
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	89 e3       	ldi	r24, 0x39	; 57
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 5c 00 	call	0xb8	; 0xb8 <cero_en_bit>
  fe:	88 23       	and	r24, r24
 100:	19 f1       	breq	.+70     	; 0x148 <main+0x78>
			if(reg_suma<0x19){
 102:	89 81       	ldd	r24, Y+1	; 0x01
 104:	89 31       	cpi	r24, 0x19	; 25
 106:	68 f4       	brcc	.+26     	; 0x122 <main+0x52>
			Sumar(&reg_suma);
 108:	ce 01       	movw	r24, r28
 10a:	01 96       	adiw	r24, 0x01	; 1
 10c:	0e 94 41 00 	call	0x82	; 0x82 <Sumar>
			Swap(&reg_suma,&reg_Display);
 110:	be 01       	movw	r22, r28
 112:	6e 5f       	subi	r22, 0xFE	; 254
 114:	7f 4f       	sbci	r23, 0xFF	; 255
 116:	ce 01       	movw	r24, r28
 118:	01 96       	adiw	r24, 0x01	; 1
 11a:	0e 94 36 00 	call	0x6c	; 0x6c <Swap>
			PORTC=reg_Display;
 11e:	8a 81       	ldd	r24, Y+2	; 0x02
 120:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 122:	83 ed       	ldi	r24, 0xD3	; 211
 124:	90 e3       	ldi	r25, 0x30	; 48
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <main+0x56>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <main+0x5c>
 12c:	00 00       	nop
			}
			_delay_ms(50);
			while(cero_en_bit(&PINA,0)){
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	89 e3       	ldi	r24, 0x39	; 57
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 5c 00 	call	0xb8	; 0xb8 <cero_en_bit>
 138:	81 11       	cpse	r24, r1
 13a:	f9 cf       	rjmp	.-14     	; 0x12e <main+0x5e>
 13c:	83 ed       	ldi	r24, 0xD3	; 211
 13e:	90 e3       	ldi	r25, 0x30	; 48
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <main+0x70>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0x76>
 146:	00 00       	nop
				
			}
			_delay_ms(50);
		}
		
		if(cero_en_bit(&PINA,7)){
 148:	67 e0       	ldi	r22, 0x07	; 7
 14a:	89 e3       	ldi	r24, 0x39	; 57
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 5c 00 	call	0xb8	; 0xb8 <cero_en_bit>
 152:	88 23       	and	r24, r24
 154:	79 f2       	breq	.-98     	; 0xf4 <main+0x24>
			if(reg_suma>0){
 156:	89 81       	ldd	r24, Y+1	; 0x01
 158:	88 23       	and	r24, r24
 15a:	69 f0       	breq	.+26     	; 0x176 <main+0xa6>
			Restar(&reg_suma);
 15c:	ce 01       	movw	r24, r28
 15e:	01 96       	adiw	r24, 0x01	; 1
 160:	0e 94 4f 00 	call	0x9e	; 0x9e <Restar>
			Swap(&reg_suma,&reg_Display);
 164:	be 01       	movw	r22, r28
 166:	6e 5f       	subi	r22, 0xFE	; 254
 168:	7f 4f       	sbci	r23, 0xFF	; 255
 16a:	ce 01       	movw	r24, r28
 16c:	01 96       	adiw	r24, 0x01	; 1
 16e:	0e 94 36 00 	call	0x6c	; 0x6c <Swap>
			PORTC=reg_Display;
 172:	8a 81       	ldd	r24, Y+2	; 0x02
 174:	85 bb       	out	0x15, r24	; 21
 176:	83 ed       	ldi	r24, 0xD3	; 211
 178:	90 e3       	ldi	r25, 0x30	; 48
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <main+0xaa>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <main+0xb0>
 180:	00 00       	nop
			}
			_delay_ms(50);
			while(cero_en_bit(&PINA,7)){	
 182:	67 e0       	ldi	r22, 0x07	; 7
 184:	89 e3       	ldi	r24, 0x39	; 57
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 5c 00 	call	0xb8	; 0xb8 <cero_en_bit>
 18c:	81 11       	cpse	r24, r1
 18e:	f9 cf       	rjmp	.-14     	; 0x182 <main+0xb2>
 190:	83 ed       	ldi	r24, 0xD3	; 211
 192:	90 e3       	ldi	r25, 0x30	; 48
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <main+0xc4>
 198:	00 c0       	rjmp	.+0      	; 0x19a <main+0xca>
 19a:	00 00       	nop
 19c:	ab cf       	rjmp	.-170    	; 0xf4 <main+0x24>

0000019e <_exit>:
 19e:	f8 94       	cli

000001a0 <__stop_program>:
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <__stop_program>
