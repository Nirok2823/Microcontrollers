
Practica_11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000604  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000678  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  00000678  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000678  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012ea  00000000  00000000  000007cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000939  00000000  00000000  00001ab6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000918  00000000  00000000  000023ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  00002d08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b9  00000000  00000000  00002f44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a70  00000000  00000000  000033fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00003e6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 36       	cpi	r26, 0x65	; 101
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <main>
  74:	0c 94 00 03 	jmp	0x600	; 0x600 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  7c:	85 b3       	in	r24, 0x15	; 21
  7e:	80 64       	ori	r24, 0x40	; 64
  80:	85 bb       	out	0x15, r24	; 21
  82:	00 c0       	rjmp	.+0      	; 0x84 <toggle_e+0x8>
  84:	85 b3       	in	r24, 0x15	; 21
  86:	8f 7b       	andi	r24, 0xBF	; 191
  88:	85 bb       	out	0x15, r24	; 21
  8a:	08 95       	ret

0000008c <lcd_write>:
  8c:	cf 93       	push	r28
  8e:	df 93       	push	r29
  90:	d8 2f       	mov	r29, r24
  92:	66 23       	and	r22, r22
  94:	21 f0       	breq	.+8      	; 0x9e <lcd_write+0x12>
  96:	85 b3       	in	r24, 0x15	; 21
  98:	80 61       	ori	r24, 0x10	; 16
  9a:	85 bb       	out	0x15, r24	; 21
  9c:	03 c0       	rjmp	.+6      	; 0xa4 <lcd_write+0x18>
  9e:	85 b3       	in	r24, 0x15	; 21
  a0:	8f 7e       	andi	r24, 0xEF	; 239
  a2:	85 bb       	out	0x15, r24	; 21
  a4:	85 b3       	in	r24, 0x15	; 21
  a6:	8f 7d       	andi	r24, 0xDF	; 223
  a8:	85 bb       	out	0x15, r24	; 21
  aa:	84 b3       	in	r24, 0x14	; 20
  ac:	8f 60       	ori	r24, 0x0F	; 15
  ae:	84 bb       	out	0x14, r24	; 20
  b0:	c5 b3       	in	r28, 0x15	; 21
  b2:	c0 7f       	andi	r28, 0xF0	; 240
  b4:	8d 2f       	mov	r24, r29
  b6:	82 95       	swap	r24
  b8:	8f 70       	andi	r24, 0x0F	; 15
  ba:	8c 2b       	or	r24, r28
  bc:	85 bb       	out	0x15, r24	; 21
  be:	0e 94 3e 00 	call	0x7c	; 0x7c <toggle_e>
  c2:	df 70       	andi	r29, 0x0F	; 15
  c4:	dc 2b       	or	r29, r28
  c6:	d5 bb       	out	0x15, r29	; 21
  c8:	0e 94 3e 00 	call	0x7c	; 0x7c <toggle_e>
  cc:	cf 60       	ori	r28, 0x0F	; 15
  ce:	c5 bb       	out	0x15, r28	; 21
  d0:	df 91       	pop	r29
  d2:	cf 91       	pop	r28
  d4:	08 95       	ret

000000d6 <lcd_read>:
  d6:	88 23       	and	r24, r24
  d8:	21 f0       	breq	.+8      	; 0xe2 <lcd_read+0xc>
  da:	85 b3       	in	r24, 0x15	; 21
  dc:	80 61       	ori	r24, 0x10	; 16
  de:	85 bb       	out	0x15, r24	; 21
  e0:	03 c0       	rjmp	.+6      	; 0xe8 <lcd_read+0x12>
  e2:	85 b3       	in	r24, 0x15	; 21
  e4:	8f 7e       	andi	r24, 0xEF	; 239
  e6:	85 bb       	out	0x15, r24	; 21
  e8:	85 b3       	in	r24, 0x15	; 21
  ea:	80 62       	ori	r24, 0x20	; 32
  ec:	85 bb       	out	0x15, r24	; 21
  ee:	84 b3       	in	r24, 0x14	; 20
  f0:	80 7f       	andi	r24, 0xF0	; 240
  f2:	84 bb       	out	0x14, r24	; 20
  f4:	85 b3       	in	r24, 0x15	; 21
  f6:	80 64       	ori	r24, 0x40	; 64
  f8:	85 bb       	out	0x15, r24	; 21
  fa:	00 c0       	rjmp	.+0      	; 0xfc <lcd_read+0x26>
  fc:	93 b3       	in	r25, 0x13	; 19
  fe:	92 95       	swap	r25
 100:	90 7f       	andi	r25, 0xF0	; 240
 102:	85 b3       	in	r24, 0x15	; 21
 104:	8f 7b       	andi	r24, 0xBF	; 191
 106:	85 bb       	out	0x15, r24	; 21
 108:	00 c0       	rjmp	.+0      	; 0x10a <lcd_read+0x34>
 10a:	85 b3       	in	r24, 0x15	; 21
 10c:	80 64       	ori	r24, 0x40	; 64
 10e:	85 bb       	out	0x15, r24	; 21
 110:	00 c0       	rjmp	.+0      	; 0x112 <lcd_read+0x3c>
 112:	83 b3       	in	r24, 0x13	; 19
 114:	8f 70       	andi	r24, 0x0F	; 15
 116:	25 b3       	in	r18, 0x15	; 21
 118:	2f 7b       	andi	r18, 0xBF	; 191
 11a:	25 bb       	out	0x15, r18	; 21
 11c:	89 2b       	or	r24, r25
 11e:	08 95       	ret

00000120 <lcd_waitbusy>:
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	0e 94 6b 00 	call	0xd6	; 0xd6 <lcd_read>
 126:	88 23       	and	r24, r24
 128:	dc f3       	brlt	.-10     	; 0x120 <lcd_waitbusy>
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <lcd_waitbusy+0xe>
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	0e 94 6b 00 	call	0xd6	; 0xd6 <lcd_read>
 138:	08 95       	ret

0000013a <lcd_command>:
 13a:	cf 93       	push	r28
 13c:	c8 2f       	mov	r28, r24
 13e:	0e 94 90 00 	call	0x120	; 0x120 <lcd_waitbusy>
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	8c 2f       	mov	r24, r28
 146:	0e 94 46 00 	call	0x8c	; 0x8c <lcd_write>
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <lcd_gotoxy>:
 14e:	61 11       	cpse	r22, r1
 150:	04 c0       	rjmp	.+8      	; 0x15a <lcd_gotoxy+0xc>
 152:	80 58       	subi	r24, 0x80	; 128
 154:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_command>
 158:	08 95       	ret
 15a:	80 54       	subi	r24, 0x40	; 64
 15c:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_command>
 160:	08 95       	ret

00000162 <lcd_clrscr>:
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_command>
 168:	08 95       	ret

0000016a <lcd_putc>:
 16a:	cf 93       	push	r28
 16c:	c8 2f       	mov	r28, r24
 16e:	0e 94 90 00 	call	0x120	; 0x120 <lcd_waitbusy>
 172:	ca 30       	cpi	r28, 0x0A	; 10
 174:	49 f4       	brne	.+18     	; 0x188 <lcd_putc+0x1e>
 176:	80 34       	cpi	r24, 0x40	; 64
 178:	10 f4       	brcc	.+4      	; 0x17e <lcd_putc+0x14>
 17a:	80 e4       	ldi	r24, 0x40	; 64
 17c:	01 c0       	rjmp	.+2      	; 0x180 <lcd_putc+0x16>
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	80 58       	subi	r24, 0x80	; 128
 182:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_command>
 186:	04 c0       	rjmp	.+8      	; 0x190 <lcd_putc+0x26>
 188:	61 e0       	ldi	r22, 0x01	; 1
 18a:	8c 2f       	mov	r24, r28
 18c:	0e 94 46 00 	call	0x8c	; 0x8c <lcd_write>
 190:	cf 91       	pop	r28
 192:	08 95       	ret

00000194 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 194:	1f 93       	push	r17
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	18 2f       	mov	r17, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 19c:	84 b3       	in	r24, 0x14	; 20
 19e:	8f 67       	ori	r24, 0x7F	; 127
 1a0:	84 bb       	out	0x14, r24	; 20
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1a2:	80 e8       	ldi	r24, 0x80	; 128
 1a4:	9e e3       	ldi	r25, 0x3E	; 62
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <lcd_init+0x12>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 1aa:	85 b3       	in	r24, 0x15	; 21
 1ac:	82 60       	ori	r24, 0x02	; 2
 1ae:	85 bb       	out	0x15, r24	; 21
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 1b0:	85 b3       	in	r24, 0x15	; 21
 1b2:	81 60       	ori	r24, 0x01	; 1
 1b4:	85 bb       	out	0x15, r24	; 21
    lcd_e_toggle();
 1b6:	0e 94 3e 00 	call	0x7c	; 0x7c <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1ba:	80 e8       	ldi	r24, 0x80	; 128
 1bc:	93 e1       	ldi	r25, 0x13	; 19
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <lcd_init+0x2a>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 1c2:	0e 94 3e 00 	call	0x7c	; 0x7c <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1c6:	c0 e4       	ldi	r28, 0x40	; 64
 1c8:	d0 e0       	ldi	r29, 0x00	; 0
 1ca:	ce 01       	movw	r24, r28
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_init+0x38>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 1d0:	0e 94 3e 00 	call	0x7c	; 0x7c <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1d4:	ce 01       	movw	r24, r28
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <lcd_init+0x42>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 1da:	85 b3       	in	r24, 0x15	; 21
 1dc:	8e 7f       	andi	r24, 0xFE	; 254
 1de:	85 bb       	out	0x15, r24	; 21
    lcd_e_toggle();
 1e0:	0e 94 3e 00 	call	0x7c	; 0x7c <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1e4:	21 97       	sbiw	r28, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <lcd_init+0x50>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 1e8:	88 e2       	ldi	r24, 0x28	; 40
 1ea:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 1ee:	88 e0       	ldi	r24, 0x08	; 8
 1f0:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 1f4:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 1f8:	86 e0       	ldi	r24, 0x06	; 6
 1fa:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 1fe:	81 2f       	mov	r24, r17
 200:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_command>

}/* lcd_init */
 204:	df 91       	pop	r29
 206:	cf 91       	pop	r28
 208:	1f 91       	pop	r17
 20a:	08 95       	ret

0000020c <cero_en_bit>:



uint8_t cero_en_bit(volatile uint8_t *LUGAR, uint8_t BIT)
{
	return (!(*LUGAR&(1<<BIT)));
 20c:	fc 01       	movw	r30, r24
 20e:	80 81       	ld	r24, Z
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 c0       	rjmp	.+4      	; 0x218 <cero_en_bit+0xc>
 214:	95 95       	asr	r25
 216:	87 95       	ror	r24
 218:	6a 95       	dec	r22
 21a:	e2 f7       	brpl	.-8      	; 0x214 <cero_en_bit+0x8>
 21c:	f1 e0       	ldi	r31, 0x01	; 1
 21e:	8f 27       	eor	r24, r31
}
 220:	81 70       	andi	r24, 0x01	; 1
 222:	08 95       	ret

00000224 <Traba>:
#define Puerto_teclado PORTB

uint8_t datos[4]={0,0,0,0};
uint8_t new_dat;

void Traba(volatile uint8_t *Lugar, uint8_t Bit){
 224:	0f 93       	push	r16
 226:	1f 93       	push	r17
 228:	cf 93       	push	r28
 22a:	8c 01       	movw	r16, r24
 22c:	c6 2f       	mov	r28, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22e:	83 ed       	ldi	r24, 0xD3	; 211
 230:	90 e3       	ldi	r25, 0x30	; 48
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <Traba+0xe>
 236:	00 c0       	rjmp	.+0      	; 0x238 <Traba+0x14>
 238:	00 00       	nop
	_delay_ms(50);
	while(cero_en_bit(&*Lugar, Bit)){}
 23a:	6c 2f       	mov	r22, r28
 23c:	c8 01       	movw	r24, r16
 23e:	0e 94 06 01 	call	0x20c	; 0x20c <cero_en_bit>
 242:	81 11       	cpse	r24, r1
 244:	fa cf       	rjmp	.-12     	; 0x23a <Traba+0x16>
 246:	83 ed       	ldi	r24, 0xD3	; 211
 248:	90 e3       	ldi	r25, 0x30	; 48
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <Traba+0x26>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <Traba+0x2c>
 250:	00 00       	nop
	_delay_ms(50);
}
 252:	cf 91       	pop	r28
 254:	1f 91       	pop	r17
 256:	0f 91       	pop	r16
 258:	08 95       	ret

0000025a <uno_en_bit>:
	return (!(*LUGAR&(1<<BIT)));
}

uint8_t uno_en_bit(volatile uint8_t *LUGAR, uint8_t BIT)
{
	return (*LUGAR&(1<<BIT));
 25a:	fc 01       	movw	r30, r24
 25c:	20 81       	ld	r18, Z
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	02 c0       	rjmp	.+4      	; 0x268 <uno_en_bit+0xe>
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	6a 95       	dec	r22
 26a:	e2 f7       	brpl	.-8      	; 0x264 <uno_en_bit+0xa>
}
 26c:	82 23       	and	r24, r18
 26e:	08 95       	ret

00000270 <EEPROM_write>:
	while(cero_en_bit(&*Lugar, Bit)){}
	_delay_ms(50);
}

void EEPROM_write(uint8_t Dir, uint8_t Dat)
{
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	c8 2f       	mov	r28, r24
 276:	d6 2f       	mov	r29, r22
	while(uno_en_bit(&EECR,EEWE)){}
 278:	61 e0       	ldi	r22, 0x01	; 1
 27a:	8c e3       	ldi	r24, 0x3C	; 60
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 2d 01 	call	0x25a	; 0x25a <uno_en_bit>
 282:	81 11       	cpse	r24, r1
 284:	f9 cf       	rjmp	.-14     	; 0x278 <EEPROM_write+0x8>
		
	EEAR=Dir;
 286:	8c 2f       	mov	r24, r28
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	9f bb       	out	0x1f, r25	; 31
 28c:	8e bb       	out	0x1e, r24	; 30
	EEDR=Dat;
 28e:	dd bb       	out	0x1d, r29	; 29
	//cli();
	
	EECR|=(1<<EEMWE);
 290:	8c b3       	in	r24, 0x1c	; 28
 292:	84 60       	ori	r24, 0x04	; 4
 294:	8c bb       	out	0x1c, r24	; 28
	EECR|=(1<<EEWE);
 296:	8c b3       	in	r24, 0x1c	; 28
 298:	82 60       	ori	r24, 0x02	; 2
 29a:	8c bb       	out	0x1c, r24	; 28
	
	//sei();
}
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	08 95       	ret

000002a2 <EEPROM_read>:

uint8_t EEPROM_read(uint8_t Dir)
{
 2a2:	cf 93       	push	r28
 2a4:	c8 2f       	mov	r28, r24
	while(uno_en_bit(&EECR,EEWE)){}
 2a6:	61 e0       	ldi	r22, 0x01	; 1
 2a8:	8c e3       	ldi	r24, 0x3C	; 60
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 2d 01 	call	0x25a	; 0x25a <uno_en_bit>
 2b0:	81 11       	cpse	r24, r1
 2b2:	f9 cf       	rjmp	.-14     	; 0x2a6 <EEPROM_read+0x4>
	
	EEAR=Dir;
 2b4:	8c 2f       	mov	r24, r28
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	9f bb       	out	0x1f, r25	; 31
 2ba:	8e bb       	out	0x1e, r24	; 30
	EECR|=(1<<EERE);
 2bc:	8c b3       	in	r24, 0x1c	; 28
 2be:	81 60       	ori	r24, 0x01	; 1
 2c0:	8c bb       	out	0x1c, r24	; 28
	return EEDR;
 2c2:	8d b3       	in	r24, 0x1d	; 29
}
 2c4:	cf 91       	pop	r28
 2c6:	08 95       	ret

000002c8 <ini_eeprom>:

void ini_eeprom(){
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
	for(int i=0; i<4; i++){
 2cc:	c0 e0       	ldi	r28, 0x00	; 0
 2ce:	d0 e0       	ldi	r29, 0x00	; 0
 2d0:	08 c0       	rjmp	.+16     	; 0x2e2 <ini_eeprom+0x1a>
		datos[i]=EEPROM_read(i);
 2d2:	8c 2f       	mov	r24, r28
 2d4:	0e 94 51 01 	call	0x2a2	; 0x2a2 <EEPROM_read>
 2d8:	fe 01       	movw	r30, r28
 2da:	e0 5a       	subi	r30, 0xA0	; 160
 2dc:	ff 4f       	sbci	r31, 0xFF	; 255
 2de:	80 83       	st	Z, r24
	EECR|=(1<<EERE);
	return EEDR;
}

void ini_eeprom(){
	for(int i=0; i<4; i++){
 2e0:	21 96       	adiw	r28, 0x01	; 1
 2e2:	c4 30       	cpi	r28, 0x04	; 4
 2e4:	d1 05       	cpc	r29, r1
 2e6:	ac f3       	brlt	.-22     	; 0x2d2 <ini_eeprom+0xa>
		datos[i]=EEPROM_read(i);
	}
	lcd_gotoxy(0,0);
 2e8:	60 e0       	ldi	r22, 0x00	; 0
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_gotoxy>
	for(int i=0; i<4; i++){
 2f0:	c0 e0       	ldi	r28, 0x00	; 0
 2f2:	d0 e0       	ldi	r29, 0x00	; 0
 2f4:	08 c0       	rjmp	.+16     	; 0x306 <ini_eeprom+0x3e>
		lcd_putc(datos[i]+48);
 2f6:	fe 01       	movw	r30, r28
 2f8:	e0 5a       	subi	r30, 0xA0	; 160
 2fa:	ff 4f       	sbci	r31, 0xFF	; 255
 2fc:	80 81       	ld	r24, Z
 2fe:	80 5d       	subi	r24, 0xD0	; 208
 300:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_putc>
void ini_eeprom(){
	for(int i=0; i<4; i++){
		datos[i]=EEPROM_read(i);
	}
	lcd_gotoxy(0,0);
	for(int i=0; i<4; i++){
 304:	21 96       	adiw	r28, 0x01	; 1
 306:	c4 30       	cpi	r28, 0x04	; 4
 308:	d1 05       	cpc	r29, r1
 30a:	ac f3       	brlt	.-22     	; 0x2f6 <ini_eeprom+0x2e>
		lcd_putc(datos[i]+48);
	}
}
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	08 95       	ret

00000312 <refresh_eeprom>:

void refresh_eeprom(){
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
	for(int i=0; i<4; i++){
 316:	c0 e0       	ldi	r28, 0x00	; 0
 318:	d0 e0       	ldi	r29, 0x00	; 0
 31a:	08 c0       	rjmp	.+16     	; 0x32c <refresh_eeprom+0x1a>
		datos[i]=EEPROM_read(i);
 31c:	8c 2f       	mov	r24, r28
 31e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <EEPROM_read>
 322:	fe 01       	movw	r30, r28
 324:	e0 5a       	subi	r30, 0xA0	; 160
 326:	ff 4f       	sbci	r31, 0xFF	; 255
 328:	80 83       	st	Z, r24
		lcd_putc(datos[i]+48);
	}
}

void refresh_eeprom(){
	for(int i=0; i<4; i++){
 32a:	21 96       	adiw	r28, 0x01	; 1
 32c:	c4 30       	cpi	r28, 0x04	; 4
 32e:	d1 05       	cpc	r29, r1
 330:	ac f3       	brlt	.-22     	; 0x31c <refresh_eeprom+0xa>
 332:	c0 e0       	ldi	r28, 0x00	; 0
 334:	d0 e0       	ldi	r29, 0x00	; 0
 336:	10 c0       	rjmp	.+32     	; 0x358 <refresh_eeprom+0x46>
		datos[i]=EEPROM_read(i);
	}
	for(int i=0; i<4; i++){
		
		if(i==0)EEPROM_write(i, new_dat);
 338:	20 97       	sbiw	r28, 0x00	; 0
 33a:	31 f4       	brne	.+12     	; 0x348 <refresh_eeprom+0x36>
 33c:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <new_dat>
 340:	8c 2f       	mov	r24, r28
 342:	0e 94 38 01 	call	0x270	; 0x270 <EEPROM_write>
 346:	07 c0       	rjmp	.+14     	; 0x356 <refresh_eeprom+0x44>
		else{
			EEPROM_write(i, datos[i-1]);
 348:	fe 01       	movw	r30, r28
 34a:	e1 5a       	subi	r30, 0xA1	; 161
 34c:	ff 4f       	sbci	r31, 0xFF	; 255
 34e:	60 81       	ld	r22, Z
 350:	8c 2f       	mov	r24, r28
 352:	0e 94 38 01 	call	0x270	; 0x270 <EEPROM_write>

void refresh_eeprom(){
	for(int i=0; i<4; i++){
		datos[i]=EEPROM_read(i);
	}
	for(int i=0; i<4; i++){
 356:	21 96       	adiw	r28, 0x01	; 1
 358:	c4 30       	cpi	r28, 0x04	; 4
 35a:	d1 05       	cpc	r29, r1
 35c:	6c f3       	brlt	.-38     	; 0x338 <refresh_eeprom+0x26>
 35e:	c0 e0       	ldi	r28, 0x00	; 0
 360:	d0 e0       	ldi	r29, 0x00	; 0
 362:	08 c0       	rjmp	.+16     	; 0x374 <refresh_eeprom+0x62>
		else{
			EEPROM_write(i, datos[i-1]);
		}
	}
	for(int i=0; i<4; i++){
		datos[i]=EEPROM_read(i);
 364:	8c 2f       	mov	r24, r28
 366:	0e 94 51 01 	call	0x2a2	; 0x2a2 <EEPROM_read>
 36a:	fe 01       	movw	r30, r28
 36c:	e0 5a       	subi	r30, 0xA0	; 160
 36e:	ff 4f       	sbci	r31, 0xFF	; 255
 370:	80 83       	st	Z, r24
		if(i==0)EEPROM_write(i, new_dat);
		else{
			EEPROM_write(i, datos[i-1]);
		}
	}
	for(int i=0; i<4; i++){
 372:	21 96       	adiw	r28, 0x01	; 1
 374:	c4 30       	cpi	r28, 0x04	; 4
 376:	d1 05       	cpc	r29, r1
 378:	ac f3       	brlt	.-22     	; 0x364 <refresh_eeprom+0x52>
		datos[i]=EEPROM_read(i);
	}
	lcd_gotoxy(0,0);
 37a:	60 e0       	ldi	r22, 0x00	; 0
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_gotoxy>
	for(int i=0; i<4; i++){
 382:	c0 e0       	ldi	r28, 0x00	; 0
 384:	d0 e0       	ldi	r29, 0x00	; 0
 386:	08 c0       	rjmp	.+16     	; 0x398 <refresh_eeprom+0x86>
		lcd_putc(datos[i]+48);
 388:	fe 01       	movw	r30, r28
 38a:	e0 5a       	subi	r30, 0xA0	; 160
 38c:	ff 4f       	sbci	r31, 0xFF	; 255
 38e:	80 81       	ld	r24, Z
 390:	80 5d       	subi	r24, 0xD0	; 208
 392:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_putc>
	}
	for(int i=0; i<4; i++){
		datos[i]=EEPROM_read(i);
	}
	lcd_gotoxy(0,0);
	for(int i=0; i<4; i++){
 396:	21 96       	adiw	r28, 0x01	; 1
 398:	c4 30       	cpi	r28, 0x04	; 4
 39a:	d1 05       	cpc	r29, r1
 39c:	ac f3       	brlt	.-22     	; 0x388 <refresh_eeprom+0x76>
		lcd_putc(datos[i]+48);
	}
}
 39e:	df 91       	pop	r29
 3a0:	cf 91       	pop	r28
 3a2:	08 95       	ret

000003a4 <Teclado>:

void Teclado(){
 3a4:	ff 92       	push	r15
 3a6:	0f 93       	push	r16
 3a8:	1f 93       	push	r17
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
	uint8_t aux=20;
	Puerto_teclado|=(0xFF<<0); //estado inicial 0b11111111
 3ae:	88 b3       	in	r24, 0x18	; 24
 3b0:	8f ef       	ldi	r24, 0xFF	; 255
 3b2:	88 bb       	out	0x18, r24	; 24
	
	for(int i=0; i<4; i++){
 3b4:	00 e0       	ldi	r16, 0x00	; 0
 3b6:	10 e0       	ldi	r17, 0x00	; 0
		lcd_putc(datos[i]+48);
	}
}

void Teclado(){
	uint8_t aux=20;
 3b8:	0f 2e       	mov	r0, r31
 3ba:	f4 e1       	ldi	r31, 0x14	; 20
 3bc:	ff 2e       	mov	r15, r31
 3be:	f0 2d       	mov	r31, r0
	Puerto_teclado|=(0xFF<<0); //estado inicial 0b11111111
	
	for(int i=0; i<4; i++){
 3c0:	00 c1       	rjmp	.+512    	; 0x5c2 <__stack+0x163>
		Puerto_teclado^=(1<<i); // se pone un 0 en la posicion i
 3c2:	28 b3       	in	r18, 0x18	; 24
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	00 2e       	mov	r0, r16
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <Teclado+0x2c>
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	0a 94       	dec	r0
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <Teclado+0x28>
 3d4:	82 27       	eor	r24, r18
 3d6:	88 bb       	out	0x18, r24	; 24
		
		if(i!=0){
 3d8:	01 15       	cp	r16, r1
 3da:	11 05       	cpc	r17, r1
 3dc:	69 f0       	breq	.+26     	; 0x3f8 <Teclado+0x54>
			
			Puerto_teclado|=(1<<(i-1));
 3de:	28 b3       	in	r18, 0x18	; 24
 3e0:	a8 01       	movw	r20, r16
 3e2:	41 50       	subi	r20, 0x01	; 1
 3e4:	51 09       	sbc	r21, r1
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <Teclado+0x4c>
 3ec:	88 0f       	add	r24, r24
 3ee:	99 1f       	adc	r25, r25
 3f0:	4a 95       	dec	r20
 3f2:	e2 f7       	brpl	.-8      	; 0x3ec <Teclado+0x48>
 3f4:	82 2b       	or	r24, r18
 3f6:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3f8:	00 00       	nop
		}
		
		_delay_us(1);
		
		for(int j=4; j<8; j++){
 3fa:	c4 e0       	ldi	r28, 0x04	; 4
 3fc:	d0 e0       	ldi	r29, 0x00	; 0
 3fe:	db c0       	rjmp	.+438    	; 0x5b6 <__stack+0x157>
			
			switch(i){
 400:	01 30       	cpi	r16, 0x01	; 1
 402:	11 05       	cpc	r17, r1
 404:	09 f4       	brne	.+2      	; 0x408 <__DATA_REGION_LENGTH__+0x8>
 406:	4b c0       	rjmp	.+150    	; 0x49e <__stack+0x3f>
 408:	24 f4       	brge	.+8      	; 0x412 <__DATA_REGION_LENGTH__+0x12>
 40a:	01 15       	cp	r16, r1
 40c:	11 05       	cpc	r17, r1
 40e:	51 f0       	breq	.+20     	; 0x424 <__DATA_REGION_LENGTH__+0x24>
 410:	d1 c0       	rjmp	.+418    	; 0x5b4 <__stack+0x155>
 412:	02 30       	cpi	r16, 0x02	; 2
 414:	11 05       	cpc	r17, r1
 416:	09 f4       	brne	.+2      	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
 418:	81 c0       	rjmp	.+258    	; 0x51c <__stack+0xbd>
 41a:	03 30       	cpi	r16, 0x03	; 3
 41c:	11 05       	cpc	r17, r1
 41e:	09 f4       	brne	.+2      	; 0x422 <__DATA_REGION_LENGTH__+0x22>
 420:	b9 c0       	rjmp	.+370    	; 0x594 <__stack+0x135>
 422:	c8 c0       	rjmp	.+400    	; 0x5b4 <__stack+0x155>
				case 0:
				
				switch (j){
 424:	c5 30       	cpi	r28, 0x05	; 5
 426:	d1 05       	cpc	r29, r1
 428:	b9 f0       	breq	.+46     	; 0x458 <__DATA_REGION_LENGTH__+0x58>
 42a:	c6 30       	cpi	r28, 0x06	; 6
 42c:	d1 05       	cpc	r29, r1
 42e:	29 f1       	breq	.+74     	; 0x47a <__stack+0x1b>
 430:	c4 30       	cpi	r28, 0x04	; 4
 432:	d1 05       	cpc	r29, r1
 434:	09 f0       	breq	.+2      	; 0x438 <__DATA_REGION_LENGTH__+0x38>
 436:	be c0       	rjmp	.+380    	; 0x5b4 <__stack+0x155>
					
					case 4:
					if(cero_en_bit(&Pin_Teclado,j)){
 438:	6c 2f       	mov	r22, r28
 43a:	86 e3       	ldi	r24, 0x36	; 54
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	0e 94 06 01 	call	0x20c	; 0x20c <cero_en_bit>
 442:	88 23       	and	r24, r24
 444:	09 f4       	brne	.+2      	; 0x448 <__DATA_REGION_LENGTH__+0x48>
 446:	b6 c0       	rjmp	.+364    	; 0x5b4 <__stack+0x155>
						aux=1;//1
						
						Traba(&Pin_Teclado,j);
 448:	6c 2f       	mov	r22, r28
 44a:	86 e3       	ldi	r24, 0x36	; 54
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0e 94 12 01 	call	0x224	; 0x224 <Traba>
				
				switch (j){
					
					case 4:
					if(cero_en_bit(&Pin_Teclado,j)){
						aux=1;//1
 452:	ff 24       	eor	r15, r15
 454:	f3 94       	inc	r15
 456:	ae c0       	rjmp	.+348    	; 0x5b4 <__stack+0x155>
						Traba(&Pin_Teclado,j);
					}
					break;
					
					case 5:
					if(cero_en_bit(&Pin_Teclado,j)){
 458:	6c 2f       	mov	r22, r28
 45a:	86 e3       	ldi	r24, 0x36	; 54
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	0e 94 06 01 	call	0x20c	; 0x20c <cero_en_bit>
 462:	88 23       	and	r24, r24
 464:	09 f4       	brne	.+2      	; 0x468 <__stack+0x9>
 466:	a6 c0       	rjmp	.+332    	; 0x5b4 <__stack+0x155>
						aux=2;//print 2
						
						Traba(&Pin_Teclado,j);
 468:	6c 2f       	mov	r22, r28
 46a:	86 e3       	ldi	r24, 0x36	; 54
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	0e 94 12 01 	call	0x224	; 0x224 <Traba>
					}
					break;
					
					case 5:
					if(cero_en_bit(&Pin_Teclado,j)){
						aux=2;//print 2
 472:	68 94       	set
 474:	ff 24       	eor	r15, r15
 476:	f1 f8       	bld	r15, 1
 478:	9d c0       	rjmp	.+314    	; 0x5b4 <__stack+0x155>
						Traba(&Pin_Teclado,j);
					}
					break;
					
					case 6:
					if(cero_en_bit(&Pin_Teclado,j)){
 47a:	6c 2f       	mov	r22, r28
 47c:	86 e3       	ldi	r24, 0x36	; 54
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	0e 94 06 01 	call	0x20c	; 0x20c <cero_en_bit>
 484:	88 23       	and	r24, r24
 486:	09 f4       	brne	.+2      	; 0x48a <__stack+0x2b>
 488:	95 c0       	rjmp	.+298    	; 0x5b4 <__stack+0x155>
						aux=3;//print 3
						
						Traba(&Pin_Teclado,j);
 48a:	6c 2f       	mov	r22, r28
 48c:	86 e3       	ldi	r24, 0x36	; 54
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	0e 94 12 01 	call	0x224	; 0x224 <Traba>
					}
					break;
					
					case 6:
					if(cero_en_bit(&Pin_Teclado,j)){
						aux=3;//print 3
 494:	0f 2e       	mov	r0, r31
 496:	f3 e0       	ldi	r31, 0x03	; 3
 498:	ff 2e       	mov	r15, r31
 49a:	f0 2d       	mov	r31, r0
 49c:	8b c0       	rjmp	.+278    	; 0x5b4 <__stack+0x155>
				}
				break;
				
				case 1:
				
				switch (j){
 49e:	c5 30       	cpi	r28, 0x05	; 5
 4a0:	d1 05       	cpc	r29, r1
 4a2:	c1 f0       	breq	.+48     	; 0x4d4 <__stack+0x75>
 4a4:	c6 30       	cpi	r28, 0x06	; 6
 4a6:	d1 05       	cpc	r29, r1
 4a8:	39 f1       	breq	.+78     	; 0x4f8 <__stack+0x99>
 4aa:	c4 30       	cpi	r28, 0x04	; 4
 4ac:	d1 05       	cpc	r29, r1
 4ae:	09 f0       	breq	.+2      	; 0x4b2 <__stack+0x53>
 4b0:	81 c0       	rjmp	.+258    	; 0x5b4 <__stack+0x155>
					
					case 4:
					if(cero_en_bit(&Pin_Teclado,j)){
 4b2:	6c 2f       	mov	r22, r28
 4b4:	86 e3       	ldi	r24, 0x36	; 54
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	0e 94 06 01 	call	0x20c	; 0x20c <cero_en_bit>
 4bc:	88 23       	and	r24, r24
 4be:	09 f4       	brne	.+2      	; 0x4c2 <__stack+0x63>
 4c0:	79 c0       	rjmp	.+242    	; 0x5b4 <__stack+0x155>
					aux=4;//4
					
					Traba(&Pin_Teclado,j);
 4c2:	6c 2f       	mov	r22, r28
 4c4:	86 e3       	ldi	r24, 0x36	; 54
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	0e 94 12 01 	call	0x224	; 0x224 <Traba>
				
				switch (j){
					
					case 4:
					if(cero_en_bit(&Pin_Teclado,j)){
					aux=4;//4
 4cc:	68 94       	set
 4ce:	ff 24       	eor	r15, r15
 4d0:	f2 f8       	bld	r15, 2
 4d2:	70 c0       	rjmp	.+224    	; 0x5b4 <__stack+0x155>
					Traba(&Pin_Teclado,j);
					}
					break;
					
					case 5:
					if(cero_en_bit(&Pin_Teclado,j)){
 4d4:	6c 2f       	mov	r22, r28
 4d6:	86 e3       	ldi	r24, 0x36	; 54
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	0e 94 06 01 	call	0x20c	; 0x20c <cero_en_bit>
 4de:	88 23       	and	r24, r24
 4e0:	09 f4       	brne	.+2      	; 0x4e4 <__stack+0x85>
 4e2:	68 c0       	rjmp	.+208    	; 0x5b4 <__stack+0x155>
					aux=5;//print 5 
					
					Traba(&Pin_Teclado,j);
 4e4:	6c 2f       	mov	r22, r28
 4e6:	86 e3       	ldi	r24, 0x36	; 54
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	0e 94 12 01 	call	0x224	; 0x224 <Traba>
					}
					break;
					
					case 5:
					if(cero_en_bit(&Pin_Teclado,j)){
					aux=5;//print 5 
 4ee:	0f 2e       	mov	r0, r31
 4f0:	f5 e0       	ldi	r31, 0x05	; 5
 4f2:	ff 2e       	mov	r15, r31
 4f4:	f0 2d       	mov	r31, r0
 4f6:	5e c0       	rjmp	.+188    	; 0x5b4 <__stack+0x155>
					Traba(&Pin_Teclado,j);
					}
					break;
					
					case 6:
					if(cero_en_bit(&Pin_Teclado,j)){
 4f8:	6c 2f       	mov	r22, r28
 4fa:	86 e3       	ldi	r24, 0x36	; 54
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	0e 94 06 01 	call	0x20c	; 0x20c <cero_en_bit>
 502:	88 23       	and	r24, r24
 504:	09 f4       	brne	.+2      	; 0x508 <__stack+0xa9>
 506:	56 c0       	rjmp	.+172    	; 0x5b4 <__stack+0x155>
					aux=6;//print 6
					
					Traba(&Pin_Teclado,j);
 508:	6c 2f       	mov	r22, r28
 50a:	86 e3       	ldi	r24, 0x36	; 54
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	0e 94 12 01 	call	0x224	; 0x224 <Traba>
					}
					break;
					
					case 6:
					if(cero_en_bit(&Pin_Teclado,j)){
					aux=6;//print 6
 512:	0f 2e       	mov	r0, r31
 514:	f6 e0       	ldi	r31, 0x06	; 6
 516:	ff 2e       	mov	r15, r31
 518:	f0 2d       	mov	r31, r0
 51a:	4c c0       	rjmp	.+152    	; 0x5b4 <__stack+0x155>
				}
				break;
				
				case 2:
				
				switch (j){
 51c:	c5 30       	cpi	r28, 0x05	; 5
 51e:	d1 05       	cpc	r29, r1
 520:	c1 f0       	breq	.+48     	; 0x552 <__stack+0xf3>
 522:	c6 30       	cpi	r28, 0x06	; 6
 524:	d1 05       	cpc	r29, r1
 526:	29 f1       	breq	.+74     	; 0x572 <__stack+0x113>
 528:	c4 30       	cpi	r28, 0x04	; 4
 52a:	d1 05       	cpc	r29, r1
 52c:	09 f0       	breq	.+2      	; 0x530 <__stack+0xd1>
 52e:	42 c0       	rjmp	.+132    	; 0x5b4 <__stack+0x155>
					
					case 4:
					if(cero_en_bit(&Pin_Teclado,j)){
 530:	6c 2f       	mov	r22, r28
 532:	86 e3       	ldi	r24, 0x36	; 54
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	0e 94 06 01 	call	0x20c	; 0x20c <cero_en_bit>
 53a:	88 23       	and	r24, r24
 53c:	d9 f1       	breq	.+118    	; 0x5b4 <__stack+0x155>
					aux=7;//7
					
					Traba(&Pin_Teclado,j);
 53e:	6c 2f       	mov	r22, r28
 540:	86 e3       	ldi	r24, 0x36	; 54
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	0e 94 12 01 	call	0x224	; 0x224 <Traba>
				
				switch (j){
					
					case 4:
					if(cero_en_bit(&Pin_Teclado,j)){
					aux=7;//7
 548:	0f 2e       	mov	r0, r31
 54a:	f7 e0       	ldi	r31, 0x07	; 7
 54c:	ff 2e       	mov	r15, r31
 54e:	f0 2d       	mov	r31, r0
 550:	31 c0       	rjmp	.+98     	; 0x5b4 <__stack+0x155>
					Traba(&Pin_Teclado,j);
					}
					break;
					
					case 5:
					if(cero_en_bit(&Pin_Teclado,j)){
 552:	6c 2f       	mov	r22, r28
 554:	86 e3       	ldi	r24, 0x36	; 54
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	0e 94 06 01 	call	0x20c	; 0x20c <cero_en_bit>
 55c:	88 23       	and	r24, r24
 55e:	51 f1       	breq	.+84     	; 0x5b4 <__stack+0x155>
					aux=8;//print 8
					
					Traba(&Pin_Teclado,j);
 560:	6c 2f       	mov	r22, r28
 562:	86 e3       	ldi	r24, 0x36	; 54
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	0e 94 12 01 	call	0x224	; 0x224 <Traba>
					}
					break;
					
					case 5:
					if(cero_en_bit(&Pin_Teclado,j)){
					aux=8;//print 8
 56a:	68 94       	set
 56c:	ff 24       	eor	r15, r15
 56e:	f3 f8       	bld	r15, 3
 570:	21 c0       	rjmp	.+66     	; 0x5b4 <__stack+0x155>
					Traba(&Pin_Teclado,j);
					}
					break;
					
					case 6:
					if(cero_en_bit(&Pin_Teclado,j)){
 572:	6c 2f       	mov	r22, r28
 574:	86 e3       	ldi	r24, 0x36	; 54
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	0e 94 06 01 	call	0x20c	; 0x20c <cero_en_bit>
 57c:	88 23       	and	r24, r24
 57e:	d1 f0       	breq	.+52     	; 0x5b4 <__stack+0x155>
					aux=9;//print 9
					
					Traba(&Pin_Teclado,j);
 580:	6c 2f       	mov	r22, r28
 582:	86 e3       	ldi	r24, 0x36	; 54
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	0e 94 12 01 	call	0x224	; 0x224 <Traba>
					}
					break;
					
					case 6:
					if(cero_en_bit(&Pin_Teclado,j)){
					aux=9;//print 9
 58a:	0f 2e       	mov	r0, r31
 58c:	f9 e0       	ldi	r31, 0x09	; 9
 58e:	ff 2e       	mov	r15, r31
 590:	f0 2d       	mov	r31, r0
 592:	10 c0       	rjmp	.+32     	; 0x5b4 <__stack+0x155>
				}
				break;
				
				case 3:
				
				switch (j){
 594:	c5 30       	cpi	r28, 0x05	; 5
 596:	d1 05       	cpc	r29, r1
 598:	69 f4       	brne	.+26     	; 0x5b4 <__stack+0x155>
								
					case 5:
					if(cero_en_bit(&Pin_Teclado,j)){
 59a:	6c 2f       	mov	r22, r28
 59c:	86 e3       	ldi	r24, 0x36	; 54
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	0e 94 06 01 	call	0x20c	; 0x20c <cero_en_bit>
 5a4:	88 23       	and	r24, r24
 5a6:	31 f0       	breq	.+12     	; 0x5b4 <__stack+0x155>
					aux=0;//print 0
					
					Traba(&Pin_Teclado,j);
 5a8:	6c 2f       	mov	r22, r28
 5aa:	86 e3       	ldi	r24, 0x36	; 54
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	0e 94 12 01 	call	0x224	; 0x224 <Traba>
				
				switch (j){
								
					case 5:
					if(cero_en_bit(&Pin_Teclado,j)){
					aux=0;//print 0
 5b2:	f1 2c       	mov	r15, r1
			Puerto_teclado|=(1<<(i-1));
		}
		
		_delay_us(1);
		
		for(int j=4; j<8; j++){
 5b4:	21 96       	adiw	r28, 0x01	; 1
 5b6:	c8 30       	cpi	r28, 0x08	; 8
 5b8:	d1 05       	cpc	r29, r1
 5ba:	0c f4       	brge	.+2      	; 0x5be <__stack+0x15f>
 5bc:	21 cf       	rjmp	.-446    	; 0x400 <__DATA_REGION_LENGTH__>

void Teclado(){
	uint8_t aux=20;
	Puerto_teclado|=(0xFF<<0); //estado inicial 0b11111111
	
	for(int i=0; i<4; i++){
 5be:	0f 5f       	subi	r16, 0xFF	; 255
 5c0:	1f 4f       	sbci	r17, 0xFF	; 255
 5c2:	04 30       	cpi	r16, 0x04	; 4
 5c4:	11 05       	cpc	r17, r1
 5c6:	0c f4       	brge	.+2      	; 0x5ca <__stack+0x16b>
 5c8:	fc ce       	rjmp	.-520    	; 0x3c2 <Teclado+0x1e>
				break;
			}
			
		}
  }
  if (aux!=20){
 5ca:	84 e1       	ldi	r24, 0x14	; 20
 5cc:	f8 16       	cp	r15, r24
 5ce:	21 f0       	breq	.+8      	; 0x5d8 <__stack+0x179>
	  new_dat=aux;
 5d0:	f0 92 64 00 	sts	0x0064, r15	; 0x800064 <new_dat>
	  refresh_eeprom();
 5d4:	0e 94 89 01 	call	0x312	; 0x312 <refresh_eeprom>
  }
}
 5d8:	df 91       	pop	r29
 5da:	cf 91       	pop	r28
 5dc:	1f 91       	pop	r17
 5de:	0f 91       	pop	r16
 5e0:	ff 90       	pop	r15
 5e2:	08 95       	ret

000005e4 <main>:



int main(void)
{
	DDRB|=(0x0F<<0); //se definen como entrada A0-A3 y como salida A4-A6
 5e4:	87 b3       	in	r24, 0x17	; 23
 5e6:	8f 60       	ori	r24, 0x0F	; 15
 5e8:	87 bb       	out	0x17, r24	; 23
	PORTB|=(0xFF<<0); //estado inicial 0b11111111
 5ea:	88 b3       	in	r24, 0x18	; 24
 5ec:	8f ef       	ldi	r24, 0xFF	; 255
 5ee:	88 bb       	out	0x18, r24	; 24
	lcd_init(LCD_DISP_ON);
 5f0:	8c e0       	ldi	r24, 0x0C	; 12
 5f2:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_init>
    /* Codigo principal */
	//uint8_t cont=0;
	ini_eeprom();
 5f6:	0e 94 64 01 	call	0x2c8	; 0x2c8 <ini_eeprom>
    while (1) 
    {
		Teclado();
 5fa:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <Teclado>
 5fe:	fd cf       	rjmp	.-6      	; 0x5fa <main+0x16>

00000600 <_exit>:
 600:	f8 94       	cli

00000602 <__stop_program>:
 602:	ff cf       	rjmp	.-2      	; 0x602 <__stop_program>
