
Practica_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000022e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000022e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000022e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007ab  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000066c  00000000  00000000  00000a87  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000376  00000000  00000000  000010f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  0000146c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000367  00000000  00000000  00001528  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000223  00000000  00000000  0000188f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001ab2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
}

uint8_t uno_en_bit(volatile uint8_t *LUGAR, uint8_t BIT)
{
	return (*LUGAR&(1<<BIT));
}
  7c:	78 94       	sei
  7e:	8a b3       	in	r24, 0x1a	; 26
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8a bb       	out	0x1a, r24	; 26
  84:	9b b3       	in	r25, 0x1b	; 27
  86:	9b bb       	out	0x1b, r25	; 27
  88:	97 b3       	in	r25, 0x17	; 23
  8a:	87 bb       	out	0x17, r24	; 23
  8c:	98 b3       	in	r25, 0x18	; 24
  8e:	98 bb       	out	0x18, r25	; 24
  90:	91 b3       	in	r25, 0x11	; 17
  92:	81 bb       	out	0x11, r24	; 17
  94:	91 b3       	in	r25, 0x11	; 17
  96:	84 e0       	ldi	r24, 0x04	; 4
  98:	89 27       	eor	r24, r25
  9a:	81 bb       	out	0x11, r24	; 17
  9c:	82 b3       	in	r24, 0x12	; 18
  9e:	84 60       	ori	r24, 0x04	; 4
  a0:	82 bb       	out	0x12, r24	; 18
  a2:	8a b7       	in	r24, 0x3a	; 58
  a4:	80 6e       	ori	r24, 0xE0	; 224
  a6:	8a bf       	out	0x3a, r24	; 58
  a8:	85 b7       	in	r24, 0x35	; 53
  aa:	88 60       	ori	r24, 0x08	; 8
  ac:	85 bf       	out	0x35, r24	; 53
  ae:	8b b7       	in	r24, 0x3b	; 59
  b0:	80 64       	ori	r24, 0x40	; 64
  b2:	8b bf       	out	0x3b, r24	; 59
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	03 c0       	rjmp	.+6      	; 0xc0 <main+0x44>
  ba:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  be:	01 96       	adiw	r24, 0x01	; 1
  c0:	87 30       	cpi	r24, 0x07	; 7
  c2:	91 05       	cpc	r25, r1
  c4:	d4 f3       	brlt	.-12     	; 0xba <main+0x3e>
  c6:	f6 cf       	rjmp	.-20     	; 0xb4 <main+0x38>

000000c8 <cero_en_bit>:
  c8:	fc 01       	movw	r30, r24
  ca:	80 81       	ld	r24, Z
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <cero_en_bit+0xc>
  d0:	95 95       	asr	r25
  d2:	87 95       	ror	r24
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <cero_en_bit+0x8>
  d8:	f1 e0       	ldi	r31, 0x01	; 1
  da:	8f 27       	eor	r24, r31
  dc:	81 70       	andi	r24, 0x01	; 1
  de:	08 95       	ret

000000e0 <Traba>:
  e0:	0f 93       	push	r16
  e2:	1f 93       	push	r17
  e4:	cf 93       	push	r28
  e6:	8c 01       	movw	r16, r24
  e8:	c6 2f       	mov	r28, r22
  ea:	83 ed       	ldi	r24, 0xD3	; 211
  ec:	90 e3       	ldi	r25, 0x30	; 48
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <Traba+0xe>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <Traba+0x14>
  f4:	00 00       	nop
  f6:	6c 2f       	mov	r22, r28
  f8:	c8 01       	movw	r24, r16
  fa:	0e 94 64 00 	call	0xc8	; 0xc8 <cero_en_bit>
  fe:	81 11       	cpse	r24, r1
 100:	fa cf       	rjmp	.-12     	; 0xf6 <Traba+0x16>
 102:	83 ed       	ldi	r24, 0xD3	; 211
 104:	90 e3       	ldi	r25, 0x30	; 48
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <Traba+0x26>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <Traba+0x2c>
 10c:	00 00       	nop
 10e:	cf 91       	pop	r28
 110:	1f 91       	pop	r17
 112:	0f 91       	pop	r16
 114:	08 95       	ret

00000116 <__vector_1>:

ISR (INT0_vect)
{
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	2f 93       	push	r18
 122:	3f 93       	push	r19
 124:	4f 93       	push	r20
 126:	5f 93       	push	r21
 128:	6f 93       	push	r22
 12a:	7f 93       	push	r23
 12c:	8f 93       	push	r24
 12e:	9f 93       	push	r25
 130:	af 93       	push	r26
 132:	bf 93       	push	r27
 134:	ef 93       	push	r30
 136:	ff 93       	push	r31
	switch(Random_n){
 138:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 13c:	83 30       	cpi	r24, 0x03	; 3
 13e:	a1 f0       	breq	.+40     	; 0x168 <__vector_1+0x52>
 140:	28 f4       	brcc	.+10     	; 0x14c <__vector_1+0x36>
 142:	81 30       	cpi	r24, 0x01	; 1
 144:	49 f0       	breq	.+18     	; 0x158 <__vector_1+0x42>
 146:	82 30       	cpi	r24, 0x02	; 2
 148:	59 f0       	breq	.+22     	; 0x160 <__vector_1+0x4a>
 14a:	1f c0       	rjmp	.+62     	; 0x18a <__vector_1+0x74>
 14c:	85 30       	cpi	r24, 0x05	; 5
 14e:	a9 f0       	breq	.+42     	; 0x17a <__vector_1+0x64>
 150:	80 f0       	brcs	.+32     	; 0x172 <__vector_1+0x5c>
 152:	86 30       	cpi	r24, 0x06	; 6
 154:	b9 f0       	breq	.+46     	; 0x184 <__vector_1+0x6e>
 156:	19 c0       	rjmp	.+50     	; 0x18a <__vector_1+0x74>
		case 1:
		PORTA=0x00;
 158:	1b ba       	out	0x1b, r1	; 27
		PORTB=0x01;
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	88 bb       	out	0x18, r24	; 24
		break;
 15e:	15 c0       	rjmp	.+42     	; 0x18a <__vector_1+0x74>
		
		case 2:
		PORTA=0x24;
 160:	84 e2       	ldi	r24, 0x24	; 36
 162:	8b bb       	out	0x1b, r24	; 27
		PORTB=0x00;
 164:	18 ba       	out	0x18, r1	; 24
		break;
 166:	11 c0       	rjmp	.+34     	; 0x18a <__vector_1+0x74>
		
		case 3:
		PORTA=0x81;
 168:	81 e8       	ldi	r24, 0x81	; 129
 16a:	8b bb       	out	0x1b, r24	; 27
		PORTB=0x01;
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	88 bb       	out	0x18, r24	; 24
		break;
 170:	0c c0       	rjmp	.+24     	; 0x18a <__vector_1+0x74>
		
		case 4:
		PORTA=0xA5;
 172:	85 ea       	ldi	r24, 0xA5	; 165
 174:	8b bb       	out	0x1b, r24	; 27
		PORTB=0x00;
 176:	18 ba       	out	0x18, r1	; 24
		break;
 178:	08 c0       	rjmp	.+16     	; 0x18a <__vector_1+0x74>
		
		case 5:
		PORTA=0xA5;
 17a:	85 ea       	ldi	r24, 0xA5	; 165
 17c:	8b bb       	out	0x1b, r24	; 27
		PORTB=0x01;
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	88 bb       	out	0x18, r24	; 24
		break;
 182:	03 c0       	rjmp	.+6      	; 0x18a <__vector_1+0x74>
		
		case 6:
		PORTA=0xE7;
 184:	87 ee       	ldi	r24, 0xE7	; 231
 186:	8b bb       	out	0x1b, r24	; 27
		PORTB=0x00;
 188:	18 ba       	out	0x18, r1	; 24
		break;

	}
	
	Traba(&PIND,2);
 18a:	62 e0       	ldi	r22, 0x02	; 2
 18c:	80 e3       	ldi	r24, 0x30	; 48
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 70 00 	call	0xe0	; 0xe0 <Traba>
	
	// Código de la función de interrupción.
	// No requiere limpiar el flag respectivo. El flag se limpia por hardware
}
 194:	ff 91       	pop	r31
 196:	ef 91       	pop	r30
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	7f 91       	pop	r23
 1a2:	6f 91       	pop	r22
 1a4:	5f 91       	pop	r21
 1a6:	4f 91       	pop	r20
 1a8:	3f 91       	pop	r19
 1aa:	2f 91       	pop	r18
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <_exit>:
 1b6:	f8 94       	cli

000001b8 <__stop_program>:
 1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <__stop_program>
