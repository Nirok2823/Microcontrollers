
Practica_15_Serial3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000055c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000055c  000005f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  0080006e  0080006e  000005fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000630  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000138a  00000000  00000000  0000075c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000933  00000000  00000000  00001ae6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000906  00000000  00000000  00002419  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000254  00000000  00000000  00002d20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000501  00000000  00000000  00002f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a1d  00000000  00000000  00003475  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00003e92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e5       	ldi	r30, 0x5C	; 92
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 37       	cpi	r26, 0x75	; 117
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ae 01 	call	0x35c	; 0x35c <main>
  8a:	0c 94 ac 02 	jmp	0x558	; 0x558 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  92:	85 b3       	in	r24, 0x15	; 21
  94:	80 64       	ori	r24, 0x40	; 64
  96:	85 bb       	out	0x15, r24	; 21
  98:	00 c0       	rjmp	.+0      	; 0x9a <toggle_e+0x8>
  9a:	85 b3       	in	r24, 0x15	; 21
  9c:	8f 7b       	andi	r24, 0xBF	; 191
  9e:	85 bb       	out	0x15, r24	; 21
  a0:	08 95       	ret

000000a2 <lcd_write>:
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	d8 2f       	mov	r29, r24
  a8:	66 23       	and	r22, r22
  aa:	21 f0       	breq	.+8      	; 0xb4 <lcd_write+0x12>
  ac:	85 b3       	in	r24, 0x15	; 21
  ae:	80 61       	ori	r24, 0x10	; 16
  b0:	85 bb       	out	0x15, r24	; 21
  b2:	03 c0       	rjmp	.+6      	; 0xba <lcd_write+0x18>
  b4:	85 b3       	in	r24, 0x15	; 21
  b6:	8f 7e       	andi	r24, 0xEF	; 239
  b8:	85 bb       	out	0x15, r24	; 21
  ba:	85 b3       	in	r24, 0x15	; 21
  bc:	8f 7d       	andi	r24, 0xDF	; 223
  be:	85 bb       	out	0x15, r24	; 21
  c0:	84 b3       	in	r24, 0x14	; 20
  c2:	8f 60       	ori	r24, 0x0F	; 15
  c4:	84 bb       	out	0x14, r24	; 20
  c6:	c5 b3       	in	r28, 0x15	; 21
  c8:	c0 7f       	andi	r28, 0xF0	; 240
  ca:	8d 2f       	mov	r24, r29
  cc:	82 95       	swap	r24
  ce:	8f 70       	andi	r24, 0x0F	; 15
  d0:	8c 2b       	or	r24, r28
  d2:	85 bb       	out	0x15, r24	; 21
  d4:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
  d8:	df 70       	andi	r29, 0x0F	; 15
  da:	dc 2b       	or	r29, r28
  dc:	d5 bb       	out	0x15, r29	; 21
  de:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
  e2:	cf 60       	ori	r28, 0x0F	; 15
  e4:	c5 bb       	out	0x15, r28	; 21
  e6:	df 91       	pop	r29
  e8:	cf 91       	pop	r28
  ea:	08 95       	ret

000000ec <lcd_read>:
  ec:	88 23       	and	r24, r24
  ee:	21 f0       	breq	.+8      	; 0xf8 <lcd_read+0xc>
  f0:	85 b3       	in	r24, 0x15	; 21
  f2:	80 61       	ori	r24, 0x10	; 16
  f4:	85 bb       	out	0x15, r24	; 21
  f6:	03 c0       	rjmp	.+6      	; 0xfe <lcd_read+0x12>
  f8:	85 b3       	in	r24, 0x15	; 21
  fa:	8f 7e       	andi	r24, 0xEF	; 239
  fc:	85 bb       	out	0x15, r24	; 21
  fe:	85 b3       	in	r24, 0x15	; 21
 100:	80 62       	ori	r24, 0x20	; 32
 102:	85 bb       	out	0x15, r24	; 21
 104:	84 b3       	in	r24, 0x14	; 20
 106:	80 7f       	andi	r24, 0xF0	; 240
 108:	84 bb       	out	0x14, r24	; 20
 10a:	85 b3       	in	r24, 0x15	; 21
 10c:	80 64       	ori	r24, 0x40	; 64
 10e:	85 bb       	out	0x15, r24	; 21
 110:	00 c0       	rjmp	.+0      	; 0x112 <lcd_read+0x26>
 112:	93 b3       	in	r25, 0x13	; 19
 114:	92 95       	swap	r25
 116:	90 7f       	andi	r25, 0xF0	; 240
 118:	85 b3       	in	r24, 0x15	; 21
 11a:	8f 7b       	andi	r24, 0xBF	; 191
 11c:	85 bb       	out	0x15, r24	; 21
 11e:	00 c0       	rjmp	.+0      	; 0x120 <lcd_read+0x34>
 120:	85 b3       	in	r24, 0x15	; 21
 122:	80 64       	ori	r24, 0x40	; 64
 124:	85 bb       	out	0x15, r24	; 21
 126:	00 c0       	rjmp	.+0      	; 0x128 <lcd_read+0x3c>
 128:	83 b3       	in	r24, 0x13	; 19
 12a:	8f 70       	andi	r24, 0x0F	; 15
 12c:	25 b3       	in	r18, 0x15	; 21
 12e:	2f 7b       	andi	r18, 0xBF	; 191
 130:	25 bb       	out	0x15, r18	; 21
 132:	89 2b       	or	r24, r25
 134:	08 95       	ret

00000136 <lcd_waitbusy>:
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	0e 94 76 00 	call	0xec	; 0xec <lcd_read>
 13c:	88 23       	and	r24, r24
 13e:	dc f3       	brlt	.-10     	; 0x136 <lcd_waitbusy>
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <lcd_waitbusy+0xe>
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	0e 94 76 00 	call	0xec	; 0xec <lcd_read>
 14e:	08 95       	ret

00000150 <lcd_command>:
 150:	cf 93       	push	r28
 152:	c8 2f       	mov	r28, r24
 154:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_waitbusy>
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	8c 2f       	mov	r24, r28
 15c:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_write>
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <lcd_gotoxy>:
 164:	61 11       	cpse	r22, r1
 166:	04 c0       	rjmp	.+8      	; 0x170 <lcd_gotoxy+0xc>
 168:	80 58       	subi	r24, 0x80	; 128
 16a:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
 16e:	08 95       	ret
 170:	80 54       	subi	r24, 0x40	; 64
 172:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
 176:	08 95       	ret

00000178 <lcd_clrscr>:
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
 17e:	08 95       	ret

00000180 <lcd_putc>:
 180:	cf 93       	push	r28
 182:	c8 2f       	mov	r28, r24
 184:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_waitbusy>
 188:	ca 30       	cpi	r28, 0x0A	; 10
 18a:	49 f4       	brne	.+18     	; 0x19e <lcd_putc+0x1e>
 18c:	80 34       	cpi	r24, 0x40	; 64
 18e:	10 f4       	brcc	.+4      	; 0x194 <lcd_putc+0x14>
 190:	80 e4       	ldi	r24, 0x40	; 64
 192:	01 c0       	rjmp	.+2      	; 0x196 <lcd_putc+0x16>
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	80 58       	subi	r24, 0x80	; 128
 198:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
 19c:	04 c0       	rjmp	.+8      	; 0x1a6 <lcd_putc+0x26>
 19e:	61 e0       	ldi	r22, 0x01	; 1
 1a0:	8c 2f       	mov	r24, r28
 1a2:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_write>
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <lcd_puts>:
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	fc 01       	movw	r30, r24
 1b0:	03 c0       	rjmp	.+6      	; 0x1b8 <lcd_puts+0xe>
 1b2:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_putc>
 1b6:	fe 01       	movw	r30, r28
 1b8:	ef 01       	movw	r28, r30
 1ba:	21 96       	adiw	r28, 0x01	; 1
 1bc:	80 81       	ld	r24, Z
 1be:	81 11       	cpse	r24, r1
 1c0:	f8 cf       	rjmp	.-16     	; 0x1b2 <lcd_puts+0x8>
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	08 95       	ret

000001c8 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1c8:	1f 93       	push	r17
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	18 2f       	mov	r17, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 1d0:	84 b3       	in	r24, 0x14	; 20
 1d2:	8f 67       	ori	r24, 0x7F	; 127
 1d4:	84 bb       	out	0x14, r24	; 20
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1d6:	80 e8       	ldi	r24, 0x80	; 128
 1d8:	9e e3       	ldi	r25, 0x3E	; 62
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <lcd_init+0x12>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 1de:	85 b3       	in	r24, 0x15	; 21
 1e0:	82 60       	ori	r24, 0x02	; 2
 1e2:	85 bb       	out	0x15, r24	; 21
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 1e4:	85 b3       	in	r24, 0x15	; 21
 1e6:	81 60       	ori	r24, 0x01	; 1
 1e8:	85 bb       	out	0x15, r24	; 21
    lcd_e_toggle();
 1ea:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1ee:	80 e8       	ldi	r24, 0x80	; 128
 1f0:	93 e1       	ldi	r25, 0x13	; 19
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <lcd_init+0x2a>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 1f6:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1fa:	c0 e4       	ldi	r28, 0x40	; 64
 1fc:	d0 e0       	ldi	r29, 0x00	; 0
 1fe:	ce 01       	movw	r24, r28
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <__EEPROM_REGION_LENGTH__>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 204:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 208:	ce 01       	movw	r24, r28
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <__EEPROM_REGION_LENGTH__+0xa>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 20e:	85 b3       	in	r24, 0x15	; 21
 210:	8e 7f       	andi	r24, 0xFE	; 254
 212:	85 bb       	out	0x15, r24	; 21
    lcd_e_toggle();
 214:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 218:	21 97       	sbiw	r28, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <__EEPROM_REGION_LENGTH__+0x18>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 21c:	88 e2       	ldi	r24, 0x28	; 40
 21e:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 222:	88 e0       	ldi	r24, 0x08	; 8
 224:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 228:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 22c:	86 e0       	ldi	r24, 0x06	; 6
 22e:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 232:	81 2f       	mov	r24, r17
 234:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>

}/* lcd_init */
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	1f 91       	pop	r17
 23e:	08 95       	ret

00000240 <Usart_init>:

void Traba(volatile uint8_t *Lugar, uint8_t Bit){
	_delay_ms(50);
	while(cero_en_bit(&*Lugar, Bit)){}
	_delay_ms(50);
}
 240:	90 bd       	out	0x20, r25	; 32
 242:	89 b9       	out	0x09, r24	; 9
 244:	88 e9       	ldi	r24, 0x98	; 152
 246:	8a b9       	out	0x0a, r24	; 10
 248:	8e e8       	ldi	r24, 0x8E	; 142
 24a:	80 bd       	out	0x20, r24	; 32
 24c:	08 95       	ret

0000024e <Leds>:
 24e:	28 2f       	mov	r18, r24
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	ac 01       	movw	r20, r24
 254:	44 0f       	add	r20, r20
 256:	55 1f       	adc	r21, r21
 258:	44 0f       	add	r20, r20
 25a:	55 1f       	adc	r21, r21
 25c:	84 0f       	add	r24, r20
 25e:	95 1f       	adc	r25, r21
 260:	6f ef       	ldi	r22, 0xFF	; 255
 262:	70 e0       	ldi	r23, 0x00	; 0
 264:	0e 94 84 02 	call	0x508	; 0x508 <__divmodhi4>
 268:	60 93 73 00 	sts	0x0073, r22	; 0x800073 <conv>
 26c:	70 93 74 00 	sts	0x0074, r23	; 0x800074 <conv+0x1>
 270:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
 274:	81 30       	cpi	r24, 0x01	; 1
 276:	49 f0       	breq	.+18     	; 0x28a <Leds+0x3c>
 278:	18 f0       	brcs	.+6      	; 0x280 <Leds+0x32>
 27a:	82 30       	cpi	r24, 0x02	; 2
 27c:	59 f0       	breq	.+22     	; 0x294 <Leds+0x46>
 27e:	0f c0       	rjmp	.+30     	; 0x29e <Leds+0x50>
 280:	60 93 71 00 	sts	0x0071, r22	; 0x800071 <temp>
 284:	60 e0       	ldi	r22, 0x00	; 0
 286:	86 e0       	ldi	r24, 0x06	; 6
 288:	0c c0       	rjmp	.+24     	; 0x2a2 <Leds+0x54>
 28a:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <hum>
 28e:	60 e0       	ldi	r22, 0x00	; 0
 290:	8c e0       	ldi	r24, 0x0C	; 12
 292:	07 c0       	rjmp	.+14     	; 0x2a2 <Leds+0x54>
 294:	60 93 6f 00 	sts	0x006F, r22	; 0x80006f <ph>
 298:	61 e0       	ldi	r22, 0x01	; 1
 29a:	8a e0       	ldi	r24, 0x0A	; 10
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <Leds+0x54>
 29e:	60 e0       	ldi	r22, 0x00	; 0
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	23 33       	cpi	r18, 0x33	; 51
 2a4:	30 f4       	brcc	.+12     	; 0x2b2 <Leds+0x64>
 2a6:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_gotoxy>
 2aa:	80 e3       	ldi	r24, 0x30	; 48
 2ac:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_putc>
 2b0:	26 c0       	rjmp	.+76     	; 0x2fe <Leds+0xb0>
 2b2:	9d ec       	ldi	r25, 0xCD	; 205
 2b4:	92 0f       	add	r25, r18
 2b6:	93 33       	cpi	r25, 0x33	; 51
 2b8:	30 f4       	brcc	.+12     	; 0x2c6 <Leds+0x78>
 2ba:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_gotoxy>
 2be:	81 e3       	ldi	r24, 0x31	; 49
 2c0:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_putc>
 2c4:	1c c0       	rjmp	.+56     	; 0x2fe <Leds+0xb0>
 2c6:	9a e9       	ldi	r25, 0x9A	; 154
 2c8:	92 0f       	add	r25, r18
 2ca:	93 33       	cpi	r25, 0x33	; 51
 2cc:	30 f4       	brcc	.+12     	; 0x2da <Leds+0x8c>
 2ce:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_gotoxy>
 2d2:	82 e3       	ldi	r24, 0x32	; 50
 2d4:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_putc>
 2d8:	12 c0       	rjmp	.+36     	; 0x2fe <Leds+0xb0>
 2da:	97 e6       	ldi	r25, 0x67	; 103
 2dc:	92 0f       	add	r25, r18
 2de:	93 33       	cpi	r25, 0x33	; 51
 2e0:	30 f4       	brcc	.+12     	; 0x2ee <Leds+0xa0>
 2e2:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_gotoxy>
 2e6:	83 e3       	ldi	r24, 0x33	; 51
 2e8:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_putc>
 2ec:	08 c0       	rjmp	.+16     	; 0x2fe <Leds+0xb0>
 2ee:	2c 5c       	subi	r18, 0xCC	; 204
 2f0:	23 33       	cpi	r18, 0x33	; 51
 2f2:	28 f4       	brcc	.+10     	; 0x2fe <Leds+0xb0>
 2f4:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_gotoxy>
 2f8:	84 e3       	ldi	r24, 0x34	; 52
 2fa:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_putc>
 2fe:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
 302:	8f 5f       	subi	r24, 0xFF	; 255
 304:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
 308:	87 e1       	ldi	r24, 0x17	; 23
 30a:	99 e7       	ldi	r25, 0x79	; 121
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	f1 f7       	brne	.-4      	; 0x30c <Leds+0xbe>
 310:	00 c0       	rjmp	.+0      	; 0x312 <Leds+0xc4>
 312:	00 00       	nop
 314:	08 95       	ret

00000316 <cero_en_bit>:
 316:	fc 01       	movw	r30, r24
 318:	80 81       	ld	r24, Z
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	02 c0       	rjmp	.+4      	; 0x322 <cero_en_bit+0xc>
 31e:	95 95       	asr	r25
 320:	87 95       	ror	r24
 322:	6a 95       	dec	r22
 324:	e2 f7       	brpl	.-8      	; 0x31e <cero_en_bit+0x8>
 326:	f1 e0       	ldi	r31, 0x01	; 1
 328:	8f 27       	eor	r24, r31
 32a:	81 70       	andi	r24, 0x01	; 1
 32c:	08 95       	ret

0000032e <Usart_transmit>:
 32e:	cf 93       	push	r28
 330:	c8 2f       	mov	r28, r24
 332:	65 e0       	ldi	r22, 0x05	; 5
 334:	8b e2       	ldi	r24, 0x2B	; 43
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 8b 01 	call	0x316	; 0x316 <cero_en_bit>
 33c:	81 11       	cpse	r24, r1
 33e:	f9 cf       	rjmp	.-14     	; 0x332 <Usart_transmit+0x4>
 340:	cc b9       	out	0x0c, r28	; 12
 342:	cf 91       	pop	r28
 344:	08 95       	ret

00000346 <uno_en_bit>:
	return (!(*LUGAR&(1<<BIT)));
}

uint8_t uno_en_bit(volatile uint8_t *LUGAR, uint8_t BIT)
{
	return (*LUGAR&(1<<BIT));
 346:	fc 01       	movw	r30, r24
 348:	20 81       	ld	r18, Z
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	02 c0       	rjmp	.+4      	; 0x354 <uno_en_bit+0xe>
 350:	88 0f       	add	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	6a 95       	dec	r22
 356:	e2 f7       	brpl	.-8      	; 0x350 <uno_en_bit+0xa>
}
 358:	82 23       	and	r24, r18
 35a:	08 95       	ret

0000035c <main>:
	sel_port+=1;
	_delay_ms(62);
}
int main(void)
{
	sei();	
 35c:	78 94       	sei
	Usart_init(MYUBRR);
 35e:	8c e0       	ldi	r24, 0x0C	; 12
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	0e 94 20 01 	call	0x240	; 0x240 <Usart_init>
	DDRA|=(0<<0);
 366:	8a b3       	in	r24, 0x1a	; 26
 368:	8a bb       	out	0x1a, r24	; 26
	PORTA|=(0<<0);
 36a:	8b b3       	in	r24, 0x1b	; 27
 36c:	8b bb       	out	0x1b, r24	; 27
	
	ADMUX=0b01100000;
 36e:	80 e6       	ldi	r24, 0x60	; 96
 370:	87 b9       	out	0x07, r24	; 7
	ADCSRA=0b10010100;
 372:	84 e9       	ldi	r24, 0x94	; 148
 374:	86 b9       	out	0x06, r24	; 6
	
	lcd_init(LCD_DISP_ON);
 376:	8c e0       	ldi	r24, 0x0C	; 12
 378:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_init>
	lcd_gotoxy(2,0);
 37c:	60 e0       	ldi	r22, 0x00	; 0
 37e:	82 e0       	ldi	r24, 0x02	; 2
 380:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_gotoxy>
	lcd_puts("Tem:");
 384:	80 e6       	ldi	r24, 0x60	; 96
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_puts>
	
	lcd_gotoxy(8,0);
 38c:	60 e0       	ldi	r22, 0x00	; 0
 38e:	88 e0       	ldi	r24, 0x08	; 8
 390:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_gotoxy>
	lcd_puts("Hum:");
 394:	85 e6       	ldi	r24, 0x65	; 101
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_puts>
	
	lcd_gotoxy(7,1);
 39c:	61 e0       	ldi	r22, 0x01	; 1
 39e:	87 e0       	ldi	r24, 0x07	; 7
 3a0:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_gotoxy>
	lcd_puts("Ph:");
 3a4:	8a e6       	ldi	r24, 0x6A	; 106
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_puts>
    while (1) 
    {
		if(sel_port<3){
 3ac:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
 3b0:	83 30       	cpi	r24, 0x03	; 3
 3b2:	20 f4       	brcc	.+8      	; 0x3bc <main+0x60>
			ADMUX+=1;
 3b4:	87 b1       	in	r24, 0x07	; 7
 3b6:	8f 5f       	subi	r24, 0xFF	; 255
 3b8:	87 b9       	out	0x07, r24	; 7
 3ba:	05 c0       	rjmp	.+10     	; 0x3c6 <main+0x6a>
		}
		else{
			ADMUX&=0b11111100;
 3bc:	87 b1       	in	r24, 0x07	; 7
 3be:	8c 7f       	andi	r24, 0xFC	; 252
 3c0:	87 b9       	out	0x07, r24	; 7
			sel_port=0;
 3c2:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__data_end>
		}
		
		ADCSRA|=(1<<6);	
 3c6:	86 b1       	in	r24, 0x06	; 6
 3c8:	80 64       	ori	r24, 0x40	; 64
 3ca:	86 b9       	out	0x06, r24	; 6
		
		while(uno_en_bit(&ADCSRA,6)){}
 3cc:	66 e0       	ldi	r22, 0x06	; 6
 3ce:	86 e2       	ldi	r24, 0x26	; 38
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	0e 94 a3 01 	call	0x346	; 0x346 <uno_en_bit>
 3d6:	81 11       	cpse	r24, r1
 3d8:	f9 cf       	rjmp	.-14     	; 0x3cc <main+0x70>
		medicion_adc=ADCH;
 3da:	85 b1       	in	r24, 0x05	; 5
 3dc:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <medicion_adc>
		Leds(medicion_adc);
 3e0:	0e 94 27 01 	call	0x24e	; 0x24e <Leds>
			
    }
 3e4:	e3 cf       	rjmp	.-58     	; 0x3ac <main+0x50>

000003e6 <__vector_11>:
{
	return (*LUGAR&(1<<BIT));
}

ISR (USART_RXC_vect) 
{
 3e6:	1f 92       	push	r1
 3e8:	0f 92       	push	r0
 3ea:	0f b6       	in	r0, 0x3f	; 63
 3ec:	0f 92       	push	r0
 3ee:	11 24       	eor	r1, r1
 3f0:	2f 93       	push	r18
 3f2:	3f 93       	push	r19
 3f4:	4f 93       	push	r20
 3f6:	5f 93       	push	r21
 3f8:	6f 93       	push	r22
 3fa:	7f 93       	push	r23
 3fc:	8f 93       	push	r24
 3fe:	9f 93       	push	r25
 400:	af 93       	push	r26
 402:	bf 93       	push	r27
 404:	ef 93       	push	r30
 406:	ff 93       	push	r31
	switch(UDR){
 408:	8c b1       	in	r24, 0x0c	; 12
 40a:	80 35       	cpi	r24, 0x50	; 80
 40c:	09 f4       	brne	.+2      	; 0x410 <__DATA_REGION_LENGTH__+0x10>
 40e:	54 c0       	rjmp	.+168    	; 0x4b8 <__stack+0x59>
 410:	84 35       	cpi	r24, 0x54	; 84
 412:	21 f0       	breq	.+8      	; 0x41c <__DATA_REGION_LENGTH__+0x1c>
 414:	88 34       	cpi	r24, 0x48	; 72
 416:	09 f0       	breq	.+2      	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
 418:	60 c0       	rjmp	.+192    	; 0x4da <__stack+0x7b>
 41a:	2d c0       	rjmp	.+90     	; 0x476 <__stack+0x17>
		case 'T':
		Usart_transmit('T');
 41c:	84 e5       	ldi	r24, 0x54	; 84
 41e:	0e 94 97 01 	call	0x32e	; 0x32e <Usart_transmit>
		Usart_transmit('e');
 422:	85 e6       	ldi	r24, 0x65	; 101
 424:	0e 94 97 01 	call	0x32e	; 0x32e <Usart_transmit>
		Usart_transmit('m');
 428:	8d e6       	ldi	r24, 0x6D	; 109
 42a:	0e 94 97 01 	call	0x32e	; 0x32e <Usart_transmit>
		Usart_transmit('p');
 42e:	80 e7       	ldi	r24, 0x70	; 112
 430:	0e 94 97 01 	call	0x32e	; 0x32e <Usart_transmit>
		Usart_transmit('e');
 434:	85 e6       	ldi	r24, 0x65	; 101
 436:	0e 94 97 01 	call	0x32e	; 0x32e <Usart_transmit>
		Usart_transmit('r');
 43a:	82 e7       	ldi	r24, 0x72	; 114
 43c:	0e 94 97 01 	call	0x32e	; 0x32e <Usart_transmit>
		Usart_transmit('a');
 440:	81 e6       	ldi	r24, 0x61	; 97
 442:	0e 94 97 01 	call	0x32e	; 0x32e <Usart_transmit>
		Usart_transmit('t');
 446:	84 e7       	ldi	r24, 0x74	; 116
 448:	0e 94 97 01 	call	0x32e	; 0x32e <Usart_transmit>
		Usart_transmit('u');
 44c:	85 e7       	ldi	r24, 0x75	; 117
 44e:	0e 94 97 01 	call	0x32e	; 0x32e <Usart_transmit>
		Usart_transmit('r');
 452:	82 e7       	ldi	r24, 0x72	; 114
 454:	0e 94 97 01 	call	0x32e	; 0x32e <Usart_transmit>
		Usart_transmit('a');
 458:	81 e6       	ldi	r24, 0x61	; 97
 45a:	0e 94 97 01 	call	0x32e	; 0x32e <Usart_transmit>
		Usart_transmit(':');
 45e:	8a e3       	ldi	r24, 0x3A	; 58
 460:	0e 94 97 01 	call	0x32e	; 0x32e <Usart_transmit>
		Usart_transmit(' ');
 464:	80 e2       	ldi	r24, 0x20	; 32
 466:	0e 94 97 01 	call	0x32e	; 0x32e <Usart_transmit>
		Usart_transmit(temp+48);
 46a:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <temp>
 46e:	80 5d       	subi	r24, 0xD0	; 208
 470:	0e 94 97 01 	call	0x32e	; 0x32e <Usart_transmit>
		break;
 474:	32 c0       	rjmp	.+100    	; 0x4da <__stack+0x7b>
		
		case 'H':
		Usart_transmit('H');
 476:	88 e4       	ldi	r24, 0x48	; 72
 478:	0e 94 97 01 	call	0x32e	; 0x32e <Usart_transmit>
		Usart_transmit('u');
 47c:	85 e7       	ldi	r24, 0x75	; 117
 47e:	0e 94 97 01 	call	0x32e	; 0x32e <Usart_transmit>
		Usart_transmit('m');
 482:	8d e6       	ldi	r24, 0x6D	; 109
 484:	0e 94 97 01 	call	0x32e	; 0x32e <Usart_transmit>
		Usart_transmit('e');
 488:	85 e6       	ldi	r24, 0x65	; 101
 48a:	0e 94 97 01 	call	0x32e	; 0x32e <Usart_transmit>
		Usart_transmit('d');
 48e:	84 e6       	ldi	r24, 0x64	; 100
 490:	0e 94 97 01 	call	0x32e	; 0x32e <Usart_transmit>
		Usart_transmit('a');
 494:	81 e6       	ldi	r24, 0x61	; 97
 496:	0e 94 97 01 	call	0x32e	; 0x32e <Usart_transmit>
		Usart_transmit('d');
 49a:	84 e6       	ldi	r24, 0x64	; 100
 49c:	0e 94 97 01 	call	0x32e	; 0x32e <Usart_transmit>
		Usart_transmit(':');
 4a0:	8a e3       	ldi	r24, 0x3A	; 58
 4a2:	0e 94 97 01 	call	0x32e	; 0x32e <Usart_transmit>
		Usart_transmit(' ');
 4a6:	80 e2       	ldi	r24, 0x20	; 32
 4a8:	0e 94 97 01 	call	0x32e	; 0x32e <Usart_transmit>
		Usart_transmit(hum+48);
 4ac:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <hum>
 4b0:	80 5d       	subi	r24, 0xD0	; 208
 4b2:	0e 94 97 01 	call	0x32e	; 0x32e <Usart_transmit>
		break;
 4b6:	11 c0       	rjmp	.+34     	; 0x4da <__stack+0x7b>
		
		case 'P':
		Usart_transmit('P');
 4b8:	80 e5       	ldi	r24, 0x50	; 80
 4ba:	0e 94 97 01 	call	0x32e	; 0x32e <Usart_transmit>
		Usart_transmit('H');
 4be:	88 e4       	ldi	r24, 0x48	; 72
 4c0:	0e 94 97 01 	call	0x32e	; 0x32e <Usart_transmit>
		Usart_transmit(':');
 4c4:	8a e3       	ldi	r24, 0x3A	; 58
 4c6:	0e 94 97 01 	call	0x32e	; 0x32e <Usart_transmit>
		Usart_transmit(' ');
 4ca:	80 e2       	ldi	r24, 0x20	; 32
 4cc:	0e 94 97 01 	call	0x32e	; 0x32e <Usart_transmit>
		Usart_transmit(ph+48);
 4d0:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <ph>
 4d4:	80 5d       	subi	r24, 0xD0	; 208
 4d6:	0e 94 97 01 	call	0x32e	; 0x32e <Usart_transmit>
		break;
	}
	
	Usart_transmit(' ');
 4da:	80 e2       	ldi	r24, 0x20	; 32
 4dc:	0e 94 97 01 	call	0x32e	; 0x32e <Usart_transmit>
	Usart_transmit(' ');
 4e0:	80 e2       	ldi	r24, 0x20	; 32
 4e2:	0e 94 97 01 	call	0x32e	; 0x32e <Usart_transmit>
	
}
 4e6:	ff 91       	pop	r31
 4e8:	ef 91       	pop	r30
 4ea:	bf 91       	pop	r27
 4ec:	af 91       	pop	r26
 4ee:	9f 91       	pop	r25
 4f0:	8f 91       	pop	r24
 4f2:	7f 91       	pop	r23
 4f4:	6f 91       	pop	r22
 4f6:	5f 91       	pop	r21
 4f8:	4f 91       	pop	r20
 4fa:	3f 91       	pop	r19
 4fc:	2f 91       	pop	r18
 4fe:	0f 90       	pop	r0
 500:	0f be       	out	0x3f, r0	; 63
 502:	0f 90       	pop	r0
 504:	1f 90       	pop	r1
 506:	18 95       	reti

00000508 <__divmodhi4>:
 508:	97 fb       	bst	r25, 7
 50a:	07 2e       	mov	r0, r23
 50c:	16 f4       	brtc	.+4      	; 0x512 <__divmodhi4+0xa>
 50e:	00 94       	com	r0
 510:	07 d0       	rcall	.+14     	; 0x520 <__divmodhi4_neg1>
 512:	77 fd       	sbrc	r23, 7
 514:	09 d0       	rcall	.+18     	; 0x528 <__divmodhi4_neg2>
 516:	0e 94 98 02 	call	0x530	; 0x530 <__udivmodhi4>
 51a:	07 fc       	sbrc	r0, 7
 51c:	05 d0       	rcall	.+10     	; 0x528 <__divmodhi4_neg2>
 51e:	3e f4       	brtc	.+14     	; 0x52e <__divmodhi4_exit>

00000520 <__divmodhi4_neg1>:
 520:	90 95       	com	r25
 522:	81 95       	neg	r24
 524:	9f 4f       	sbci	r25, 0xFF	; 255
 526:	08 95       	ret

00000528 <__divmodhi4_neg2>:
 528:	70 95       	com	r23
 52a:	61 95       	neg	r22
 52c:	7f 4f       	sbci	r23, 0xFF	; 255

0000052e <__divmodhi4_exit>:
 52e:	08 95       	ret

00000530 <__udivmodhi4>:
 530:	aa 1b       	sub	r26, r26
 532:	bb 1b       	sub	r27, r27
 534:	51 e1       	ldi	r21, 0x11	; 17
 536:	07 c0       	rjmp	.+14     	; 0x546 <__udivmodhi4_ep>

00000538 <__udivmodhi4_loop>:
 538:	aa 1f       	adc	r26, r26
 53a:	bb 1f       	adc	r27, r27
 53c:	a6 17       	cp	r26, r22
 53e:	b7 07       	cpc	r27, r23
 540:	10 f0       	brcs	.+4      	; 0x546 <__udivmodhi4_ep>
 542:	a6 1b       	sub	r26, r22
 544:	b7 0b       	sbc	r27, r23

00000546 <__udivmodhi4_ep>:
 546:	88 1f       	adc	r24, r24
 548:	99 1f       	adc	r25, r25
 54a:	5a 95       	dec	r21
 54c:	a9 f7       	brne	.-22     	; 0x538 <__udivmodhi4_loop>
 54e:	80 95       	com	r24
 550:	90 95       	com	r25
 552:	bc 01       	movw	r22, r24
 554:	cd 01       	movw	r24, r26
 556:	08 95       	ret

00000558 <_exit>:
 558:	f8 94       	cli

0000055a <__stop_program>:
 55a:	ff cf       	rjmp	.-2      	; 0x55a <__stop_program>
