
Practica_9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000023c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000945  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e7  00000000  00000000  00000c3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000043c  00000000  00000000  00001324  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  00001760  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c9  00000000  00000000  00001800  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000490  00000000  00000000  00001bc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002059  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__vector_14>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 9e 00 	call	0x13c	; 0x13c <main>
  74:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Leds>:

void Traba(volatile uint8_t *Lugar, uint8_t Bit){
	_delay_ms(50);
	while(cero_en_bit(&*Lugar, Bit)){}
	_delay_ms(50);
}
  7c:	fb 01       	movw	r30, r22
  7e:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  82:	91 30       	cpi	r25, 0x01	; 1
  84:	49 f0       	breq	.+18     	; 0x98 <Leds+0x1c>
  86:	70 f0       	brcs	.+28     	; 0xa4 <Leds+0x28>
  88:	92 30       	cpi	r25, 0x02	; 2
  8a:	61 f0       	breq	.+24     	; 0xa4 <Leds+0x28>
  8c:	60 e0       	ldi	r22, 0x00	; 0
  8e:	50 e0       	ldi	r21, 0x00	; 0
  90:	40 e0       	ldi	r20, 0x00	; 0
  92:	20 e0       	ldi	r18, 0x00	; 0
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0b c0       	rjmp	.+22     	; 0xae <Leds+0x32>
  98:	60 ef       	ldi	r22, 0xF0	; 240
  9a:	50 ee       	ldi	r21, 0xE0	; 224
  9c:	40 ec       	ldi	r20, 0xC0	; 192
  9e:	20 e8       	ldi	r18, 0x80	; 128
  a0:	9f e0       	ldi	r25, 0x0F	; 15
  a2:	05 c0       	rjmp	.+10     	; 0xae <Leds+0x32>
  a4:	6f e0       	ldi	r22, 0x0F	; 15
  a6:	57 e0       	ldi	r21, 0x07	; 7
  a8:	43 e0       	ldi	r20, 0x03	; 3
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	90 ef       	ldi	r25, 0xF0	; 240
  ae:	83 33       	cpi	r24, 0x33	; 51
  b0:	20 f4       	brcc	.+8      	; 0xba <Leds+0x3e>
  b2:	80 81       	ld	r24, Z
  b4:	98 23       	and	r25, r24
  b6:	90 83       	st	Z, r25
  b8:	2a c0       	rjmp	.+84     	; 0x10e <Leds+0x92>
  ba:	3d ec       	ldi	r19, 0xCD	; 205
  bc:	38 0f       	add	r19, r24
  be:	33 33       	cpi	r19, 0x33	; 51
  c0:	38 f4       	brcc	.+14     	; 0xd0 <Leds+0x54>
  c2:	80 81       	ld	r24, Z
  c4:	98 23       	and	r25, r24
  c6:	90 83       	st	Z, r25
  c8:	80 81       	ld	r24, Z
  ca:	28 2b       	or	r18, r24
  cc:	20 83       	st	Z, r18
  ce:	1f c0       	rjmp	.+62     	; 0x10e <Leds+0x92>
  d0:	2a e9       	ldi	r18, 0x9A	; 154
  d2:	28 0f       	add	r18, r24
  d4:	23 33       	cpi	r18, 0x33	; 51
  d6:	38 f4       	brcc	.+14     	; 0xe6 <Leds+0x6a>
  d8:	80 81       	ld	r24, Z
  da:	98 23       	and	r25, r24
  dc:	90 83       	st	Z, r25
  de:	80 81       	ld	r24, Z
  e0:	48 2b       	or	r20, r24
  e2:	40 83       	st	Z, r20
  e4:	14 c0       	rjmp	.+40     	; 0x10e <Leds+0x92>
  e6:	27 e6       	ldi	r18, 0x67	; 103
  e8:	28 0f       	add	r18, r24
  ea:	23 33       	cpi	r18, 0x33	; 51
  ec:	38 f4       	brcc	.+14     	; 0xfc <Leds+0x80>
  ee:	80 81       	ld	r24, Z
  f0:	98 23       	and	r25, r24
  f2:	90 83       	st	Z, r25
  f4:	80 81       	ld	r24, Z
  f6:	58 2b       	or	r21, r24
  f8:	50 83       	st	Z, r21
  fa:	09 c0       	rjmp	.+18     	; 0x10e <Leds+0x92>
  fc:	8c 5c       	subi	r24, 0xCC	; 204
  fe:	83 33       	cpi	r24, 0x33	; 51
 100:	30 f4       	brcc	.+12     	; 0x10e <Leds+0x92>
 102:	80 81       	ld	r24, Z
 104:	98 23       	and	r25, r24
 106:	90 83       	st	Z, r25
 108:	80 81       	ld	r24, Z
 10a:	68 2b       	or	r22, r24
 10c:	60 83       	st	Z, r22
 10e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 112:	8f 5f       	subi	r24, 0xFF	; 255
 114:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 118:	8f e2       	ldi	r24, 0x2F	; 47
 11a:	92 ef       	ldi	r25, 0xF2	; 242
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <Leds+0xa0>
 120:	00 c0       	rjmp	.+0      	; 0x122 <Leds+0xa6>
 122:	00 00       	nop
 124:	08 95       	ret

00000126 <uno_en_bit>:
	return (!(*LUGAR&(1<<BIT)));
}

uint8_t uno_en_bit(volatile uint8_t *LUGAR, uint8_t BIT)
{
	return (*LUGAR&(1<<BIT));
 126:	fc 01       	movw	r30, r24
 128:	20 81       	ld	r18, Z
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <uno_en_bit+0xe>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <uno_en_bit+0xa>
}
 138:	82 23       	and	r24, r18
 13a:	08 95       	ret

0000013c <main>:
	sel_port+=1;
	_delay_ms(62);
}
int main(void)
{
	sei();	
 13c:	78 94       	sei
	
	DDRA|=(0<<0);
 13e:	8a b3       	in	r24, 0x1a	; 26
 140:	8a bb       	out	0x1a, r24	; 26
	PORTA|=(0<<0);
 142:	8b b3       	in	r24, 0x1b	; 27
 144:	8b bb       	out	0x1b, r24	; 27
	
	DDRB|=~(0<<0);
 146:	87 b3       	in	r24, 0x17	; 23
 148:	8f ef       	ldi	r24, 0xFF	; 255
 14a:	87 bb       	out	0x17, r24	; 23
	PORTB|=(0<<0);
 14c:	98 b3       	in	r25, 0x18	; 24
 14e:	98 bb       	out	0x18, r25	; 24
	
	DDRC|=~(0<<0);
 150:	94 b3       	in	r25, 0x14	; 20
 152:	84 bb       	out	0x14, r24	; 20
	PORTC|=(0<<0);
 154:	85 b3       	in	r24, 0x15	; 21
 156:	85 bb       	out	0x15, r24	; 21
	
	
	ADMUX=0b01100000;
 158:	80 e6       	ldi	r24, 0x60	; 96
 15a:	87 b9       	out	0x07, r24	; 7
	ADCSRA=0b10010110;
 15c:	86 e9       	ldi	r24, 0x96	; 150
 15e:	86 b9       	out	0x06, r24	; 6
	
    while (1) 
    {
		if(sel_port<3){
 160:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 164:	83 30       	cpi	r24, 0x03	; 3
 166:	20 f4       	brcc	.+8      	; 0x170 <main+0x34>
			ADMUX+=1;
 168:	87 b1       	in	r24, 0x07	; 7
 16a:	8f 5f       	subi	r24, 0xFF	; 255
 16c:	87 b9       	out	0x07, r24	; 7
 16e:	05 c0       	rjmp	.+10     	; 0x17a <main+0x3e>
		}
		else{
			ADMUX&=0b11111100;
 170:	87 b1       	in	r24, 0x07	; 7
 172:	8c 7f       	andi	r24, 0xFC	; 252
 174:	87 b9       	out	0x07, r24	; 7
			sel_port=0;
 176:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
		
		ADCSRA|=(1<<6);	
 17a:	86 b1       	in	r24, 0x06	; 6
 17c:	80 64       	ori	r24, 0x40	; 64
 17e:	86 b9       	out	0x06, r24	; 6
		
		while(uno_en_bit(&ADCSRA,6)){}
 180:	66 e0       	ldi	r22, 0x06	; 6
 182:	86 e2       	ldi	r24, 0x26	; 38
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 93 00 	call	0x126	; 0x126 <uno_en_bit>
 18a:	81 11       	cpse	r24, r1
 18c:	f9 cf       	rjmp	.-14     	; 0x180 <main+0x44>
		medicion_adc=ADCH;
 18e:	85 b1       	in	r24, 0x05	; 5
 190:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <medicion_adc>
		if(sel_port<2) Leds(medicion_adc, &PORTB);
 194:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 198:	92 30       	cpi	r25, 0x02	; 2
 19a:	28 f4       	brcc	.+10     	; 0x1a6 <main+0x6a>
 19c:	68 e3       	ldi	r22, 0x38	; 56
 19e:	70 e0       	ldi	r23, 0x00	; 0
 1a0:	0e 94 3e 00 	call	0x7c	; 0x7c <Leds>
 1a4:	dd cf       	rjmp	.-70     	; 0x160 <main+0x24>
		else Leds(medicion_adc, &PORTC);
 1a6:	65 e3       	ldi	r22, 0x35	; 53
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	0e 94 3e 00 	call	0x7c	; 0x7c <Leds>
 1ae:	d8 cf       	rjmp	.-80     	; 0x160 <main+0x24>

000001b0 <__vector_14>:
{
	return (*LUGAR&(1<<BIT));
}

ISR (ADC_vect)
{
 1b0:	1f 92       	push	r1
 1b2:	0f 92       	push	r0
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	0f 92       	push	r0
 1b8:	11 24       	eor	r1, r1
	
}
 1ba:	0f 90       	pop	r0
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	0f 90       	pop	r0
 1c0:	1f 90       	pop	r1
 1c2:	18 95       	reti

000001c4 <_exit>:
 1c4:	f8 94       	cli

000001c6 <__stop_program>:
 1c6:	ff cf       	rjmp	.-2      	; 0x1c6 <__stop_program>
