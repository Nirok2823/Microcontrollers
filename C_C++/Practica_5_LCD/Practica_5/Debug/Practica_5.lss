
Practica_5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000003d2  00000466  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  00000468  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000498  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000eba  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008cc  00000000  00000000  0000145e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000074e  00000000  00000000  00001d2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000020c  00000000  00000000  00002478  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000486  00000000  00000000  00002684  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007b5  00000000  00000000  00002b0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000032bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 ac 01 	jmp	0x358	; 0x358 <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ed       	ldi	r30, 0xD2	; 210
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 55 01 	call	0x2aa	; 0x2aa <main>
  8a:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  92:	85 b3       	in	r24, 0x15	; 21
  94:	80 64       	ori	r24, 0x40	; 64
  96:	85 bb       	out	0x15, r24	; 21
  98:	00 c0       	rjmp	.+0      	; 0x9a <toggle_e+0x8>
  9a:	85 b3       	in	r24, 0x15	; 21
  9c:	8f 7b       	andi	r24, 0xBF	; 191
  9e:	85 bb       	out	0x15, r24	; 21
  a0:	08 95       	ret

000000a2 <lcd_write>:
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	d8 2f       	mov	r29, r24
  a8:	66 23       	and	r22, r22
  aa:	21 f0       	breq	.+8      	; 0xb4 <lcd_write+0x12>
  ac:	85 b3       	in	r24, 0x15	; 21
  ae:	80 61       	ori	r24, 0x10	; 16
  b0:	85 bb       	out	0x15, r24	; 21
  b2:	03 c0       	rjmp	.+6      	; 0xba <lcd_write+0x18>
  b4:	85 b3       	in	r24, 0x15	; 21
  b6:	8f 7e       	andi	r24, 0xEF	; 239
  b8:	85 bb       	out	0x15, r24	; 21
  ba:	85 b3       	in	r24, 0x15	; 21
  bc:	8f 7d       	andi	r24, 0xDF	; 223
  be:	85 bb       	out	0x15, r24	; 21
  c0:	84 b3       	in	r24, 0x14	; 20
  c2:	8f 60       	ori	r24, 0x0F	; 15
  c4:	84 bb       	out	0x14, r24	; 20
  c6:	c5 b3       	in	r28, 0x15	; 21
  c8:	c0 7f       	andi	r28, 0xF0	; 240
  ca:	8d 2f       	mov	r24, r29
  cc:	82 95       	swap	r24
  ce:	8f 70       	andi	r24, 0x0F	; 15
  d0:	8c 2b       	or	r24, r28
  d2:	85 bb       	out	0x15, r24	; 21
  d4:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
  d8:	df 70       	andi	r29, 0x0F	; 15
  da:	dc 2b       	or	r29, r28
  dc:	d5 bb       	out	0x15, r29	; 21
  de:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
  e2:	cf 60       	ori	r28, 0x0F	; 15
  e4:	c5 bb       	out	0x15, r28	; 21
  e6:	df 91       	pop	r29
  e8:	cf 91       	pop	r28
  ea:	08 95       	ret

000000ec <lcd_read>:
  ec:	88 23       	and	r24, r24
  ee:	21 f0       	breq	.+8      	; 0xf8 <lcd_read+0xc>
  f0:	85 b3       	in	r24, 0x15	; 21
  f2:	80 61       	ori	r24, 0x10	; 16
  f4:	85 bb       	out	0x15, r24	; 21
  f6:	03 c0       	rjmp	.+6      	; 0xfe <lcd_read+0x12>
  f8:	85 b3       	in	r24, 0x15	; 21
  fa:	8f 7e       	andi	r24, 0xEF	; 239
  fc:	85 bb       	out	0x15, r24	; 21
  fe:	85 b3       	in	r24, 0x15	; 21
 100:	80 62       	ori	r24, 0x20	; 32
 102:	85 bb       	out	0x15, r24	; 21
 104:	84 b3       	in	r24, 0x14	; 20
 106:	80 7f       	andi	r24, 0xF0	; 240
 108:	84 bb       	out	0x14, r24	; 20
 10a:	85 b3       	in	r24, 0x15	; 21
 10c:	80 64       	ori	r24, 0x40	; 64
 10e:	85 bb       	out	0x15, r24	; 21
 110:	00 c0       	rjmp	.+0      	; 0x112 <lcd_read+0x26>
 112:	93 b3       	in	r25, 0x13	; 19
 114:	92 95       	swap	r25
 116:	90 7f       	andi	r25, 0xF0	; 240
 118:	85 b3       	in	r24, 0x15	; 21
 11a:	8f 7b       	andi	r24, 0xBF	; 191
 11c:	85 bb       	out	0x15, r24	; 21
 11e:	00 c0       	rjmp	.+0      	; 0x120 <lcd_read+0x34>
 120:	85 b3       	in	r24, 0x15	; 21
 122:	80 64       	ori	r24, 0x40	; 64
 124:	85 bb       	out	0x15, r24	; 21
 126:	00 c0       	rjmp	.+0      	; 0x128 <lcd_read+0x3c>
 128:	83 b3       	in	r24, 0x13	; 19
 12a:	8f 70       	andi	r24, 0x0F	; 15
 12c:	25 b3       	in	r18, 0x15	; 21
 12e:	2f 7b       	andi	r18, 0xBF	; 191
 130:	25 bb       	out	0x15, r18	; 21
 132:	89 2b       	or	r24, r25
 134:	08 95       	ret

00000136 <lcd_waitbusy>:
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	0e 94 76 00 	call	0xec	; 0xec <lcd_read>
 13c:	88 23       	and	r24, r24
 13e:	dc f3       	brlt	.-10     	; 0x136 <lcd_waitbusy>
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <lcd_waitbusy+0xe>
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	0e 94 76 00 	call	0xec	; 0xec <lcd_read>
 14e:	08 95       	ret

00000150 <lcd_command>:
 150:	cf 93       	push	r28
 152:	c8 2f       	mov	r28, r24
 154:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_waitbusy>
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	8c 2f       	mov	r24, r28
 15c:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_write>
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <lcd_gotoxy>:
 164:	61 11       	cpse	r22, r1
 166:	04 c0       	rjmp	.+8      	; 0x170 <lcd_gotoxy+0xc>
 168:	80 58       	subi	r24, 0x80	; 128
 16a:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
 16e:	08 95       	ret
 170:	80 54       	subi	r24, 0x40	; 64
 172:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
 176:	08 95       	ret

00000178 <lcd_clrscr>:
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
 17e:	08 95       	ret

00000180 <lcd_putc>:
 180:	cf 93       	push	r28
 182:	c8 2f       	mov	r28, r24
 184:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_waitbusy>
 188:	ca 30       	cpi	r28, 0x0A	; 10
 18a:	49 f4       	brne	.+18     	; 0x19e <lcd_putc+0x1e>
 18c:	80 34       	cpi	r24, 0x40	; 64
 18e:	10 f4       	brcc	.+4      	; 0x194 <lcd_putc+0x14>
 190:	80 e4       	ldi	r24, 0x40	; 64
 192:	01 c0       	rjmp	.+2      	; 0x196 <lcd_putc+0x16>
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	80 58       	subi	r24, 0x80	; 128
 198:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
 19c:	04 c0       	rjmp	.+8      	; 0x1a6 <lcd_putc+0x26>
 19e:	61 e0       	ldi	r22, 0x01	; 1
 1a0:	8c 2f       	mov	r24, r28
 1a2:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_write>
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1aa:	1f 93       	push	r17
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	18 2f       	mov	r17, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 1b2:	84 b3       	in	r24, 0x14	; 20
 1b4:	8f 67       	ori	r24, 0x7F	; 127
 1b6:	84 bb       	out	0x14, r24	; 20
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1b8:	80 e8       	ldi	r24, 0x80	; 128
 1ba:	9e e3       	ldi	r25, 0x3E	; 62
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <lcd_init+0x12>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 1c0:	85 b3       	in	r24, 0x15	; 21
 1c2:	82 60       	ori	r24, 0x02	; 2
 1c4:	85 bb       	out	0x15, r24	; 21
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 1c6:	85 b3       	in	r24, 0x15	; 21
 1c8:	81 60       	ori	r24, 0x01	; 1
 1ca:	85 bb       	out	0x15, r24	; 21
    lcd_e_toggle();
 1cc:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1d0:	80 e8       	ldi	r24, 0x80	; 128
 1d2:	93 e1       	ldi	r25, 0x13	; 19
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <lcd_init+0x2a>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 1d8:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1dc:	c0 e4       	ldi	r28, 0x40	; 64
 1de:	d0 e0       	ldi	r29, 0x00	; 0
 1e0:	ce 01       	movw	r24, r28
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <lcd_init+0x38>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 1e6:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1ea:	ce 01       	movw	r24, r28
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <lcd_init+0x42>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 1f0:	85 b3       	in	r24, 0x15	; 21
 1f2:	8e 7f       	andi	r24, 0xFE	; 254
 1f4:	85 bb       	out	0x15, r24	; 21
    lcd_e_toggle();
 1f6:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1fa:	21 97       	sbiw	r28, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <lcd_init+0x50>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 1fe:	88 e2       	ldi	r24, 0x28	; 40
 200:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 204:	88 e0       	ldi	r24, 0x08	; 8
 206:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 20a:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 20e:	86 e0       	ldi	r24, 0x06	; 6
 210:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 214:	81 2f       	mov	r24, r17
 216:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>

}/* lcd_init */
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	1f 91       	pop	r17
 220:	08 95       	ret

00000222 <print_char>:
}

uint8_t uno_en_bit(volatile uint8_t *LUGAR, uint8_t BIT)
{
	return (*LUGAR&(1<<BIT));
}
 222:	fc 01       	movw	r30, r24
 224:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <cont>
 228:	82 b7       	in	r24, 0x32	; 50
 22a:	82 bf       	out	0x32, r24	; 50
 22c:	80 81       	ld	r24, Z
 22e:	8f 5f       	subi	r24, 0xFF	; 255
 230:	80 83       	st	Z, r24
 232:	80 81       	ld	r24, Z
 234:	8b 35       	cpi	r24, 0x5B	; 91
 236:	11 f4       	brne	.+4      	; 0x23c <print_char+0x1a>
 238:	80 e4       	ldi	r24, 0x40	; 64
 23a:	80 83       	st	Z, r24
 23c:	80 81       	ld	r24, Z
 23e:	80 34       	cpi	r24, 0x40	; 64
 240:	21 f0       	breq	.+8      	; 0x24a <print_char+0x28>
 242:	80 81       	ld	r24, Z
 244:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_putc>
 248:	03 c0       	rjmp	.+6      	; 0x250 <print_char+0x2e>
 24a:	80 e2       	ldi	r24, 0x20	; 32
 24c:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_putc>
 250:	60 e0       	ldi	r22, 0x00	; 0
 252:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 256:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_gotoxy>
 25a:	08 95       	ret

0000025c <cero_en_bit>:
 25c:	fc 01       	movw	r30, r24
 25e:	80 81       	ld	r24, Z
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	02 c0       	rjmp	.+4      	; 0x268 <cero_en_bit+0xc>
 264:	95 95       	asr	r25
 266:	87 95       	ror	r24
 268:	6a 95       	dec	r22
 26a:	e2 f7       	brpl	.-8      	; 0x264 <cero_en_bit+0x8>
 26c:	f1 e0       	ldi	r31, 0x01	; 1
 26e:	8f 27       	eor	r24, r31
 270:	81 70       	andi	r24, 0x01	; 1
 272:	08 95       	ret

00000274 <Traba>:
 274:	0f 93       	push	r16
 276:	1f 93       	push	r17
 278:	cf 93       	push	r28
 27a:	8c 01       	movw	r16, r24
 27c:	c6 2f       	mov	r28, r22
 27e:	83 ed       	ldi	r24, 0xD3	; 211
 280:	90 e3       	ldi	r25, 0x30	; 48
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <Traba+0xe>
 286:	00 c0       	rjmp	.+0      	; 0x288 <Traba+0x14>
 288:	00 00       	nop
 28a:	6c 2f       	mov	r22, r28
 28c:	c8 01       	movw	r24, r16
 28e:	0e 94 2e 01 	call	0x25c	; 0x25c <cero_en_bit>
 292:	81 11       	cpse	r24, r1
 294:	fa cf       	rjmp	.-12     	; 0x28a <Traba+0x16>
 296:	83 ed       	ldi	r24, 0xD3	; 211
 298:	90 e3       	ldi	r25, 0x30	; 48
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <Traba+0x26>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <Traba+0x2c>
 2a0:	00 00       	nop
 2a2:	cf 91       	pop	r28
 2a4:	1f 91       	pop	r17
 2a6:	0f 91       	pop	r16
 2a8:	08 95       	ret

000002aa <main>:
 2aa:	78 94       	sei
 2ac:	82 b7       	in	r24, 0x32	; 50
 2ae:	82 bf       	out	0x32, r24	; 50
 2b0:	88 b7       	in	r24, 0x38	; 56
 2b2:	82 60       	ori	r24, 0x02	; 2
 2b4:	88 bf       	out	0x38, r24	; 56
 2b6:	89 b7       	in	r24, 0x39	; 57
 2b8:	82 60       	ori	r24, 0x02	; 2
 2ba:	89 bf       	out	0x39, r24	; 57
 2bc:	83 b7       	in	r24, 0x33	; 51
 2be:	88 60       	ori	r24, 0x08	; 8
 2c0:	83 bf       	out	0x33, r24	; 51
 2c2:	83 b7       	in	r24, 0x33	; 51
 2c4:	84 60       	ori	r24, 0x04	; 4
 2c6:	83 bf       	out	0x33, r24	; 51
 2c8:	83 b7       	in	r24, 0x33	; 51
 2ca:	82 60       	ori	r24, 0x02	; 2
 2cc:	83 bf       	out	0x33, r24	; 51
 2ce:	83 ef       	ldi	r24, 0xF3	; 243
 2d0:	8c bf       	out	0x3c, r24	; 60
 2d2:	8a b3       	in	r24, 0x1a	; 26
 2d4:	8e 6f       	ori	r24, 0xFE	; 254
 2d6:	8a bb       	out	0x1a, r24	; 26
 2d8:	8b b3       	in	r24, 0x1b	; 27
 2da:	81 60       	ori	r24, 0x01	; 1
 2dc:	8b bb       	out	0x1b, r24	; 27
 2de:	8c e0       	ldi	r24, 0x0C	; 12
 2e0:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_init>
 2e4:	8e e0       	ldi	r24, 0x0E	; 14
 2e6:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
 2ea:	88 e0       	ldi	r24, 0x08	; 8
 2ec:	83 bf       	out	0x33, r24	; 51
 2ee:	60 e0       	ldi	r22, 0x00	; 0
 2f0:	89 e3       	ldi	r24, 0x39	; 57
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	0e 94 2e 01 	call	0x25c	; 0x25c <cero_en_bit>
 2f8:	88 23       	and	r24, r24
 2fa:	11 f1       	breq	.+68     	; 0x340 <main+0x96>
 2fc:	83 b7       	in	r24, 0x33	; 51
 2fe:	88 30       	cpi	r24, 0x08	; 8
 300:	51 f4       	brne	.+20     	; 0x316 <main+0x6c>
 302:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <flag>
 306:	81 30       	cpi	r24, 0x01	; 1
 308:	31 f4       	brne	.+12     	; 0x316 <main+0x6c>
 30a:	83 b7       	in	r24, 0x33	; 51
 30c:	8b 5f       	subi	r24, 0xFB	; 251
 30e:	83 bf       	out	0x33, r24	; 51
 310:	82 e0       	ldi	r24, 0x02	; 2
 312:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <flag>
 316:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 31a:	80 31       	cpi	r24, 0x10	; 16
 31c:	28 f4       	brcc	.+10     	; 0x328 <main+0x7e>
 31e:	80 e6       	ldi	r24, 0x60	; 96
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 11 01 	call	0x222	; 0x222 <print_char>
 326:	07 c0       	rjmp	.+14     	; 0x336 <main+0x8c>
 328:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
 32c:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_clrscr>
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <flag>
 336:	60 e0       	ldi	r22, 0x00	; 0
 338:	89 e3       	ldi	r24, 0x39	; 57
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	0e 94 3a 01 	call	0x274	; 0x274 <Traba>
 340:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <flag>
 344:	81 30       	cpi	r24, 0x01	; 1
 346:	99 f6       	brne	.-90     	; 0x2ee <main+0x44>
 348:	83 b7       	in	r24, 0x33	; 51
 34a:	8d 30       	cpi	r24, 0x0D	; 13
 34c:	81 f6       	brne	.-96     	; 0x2ee <main+0x44>
 34e:	83 b7       	in	r24, 0x33	; 51
 350:	85 50       	subi	r24, 0x05	; 5
 352:	83 bf       	out	0x33, r24	; 51
 354:	12 be       	out	0x32, r1	; 50
 356:	cb cf       	rjmp	.-106    	; 0x2ee <main+0x44>

00000358 <__vector_19>:

ISR (TIMER0_COMP_vect )
{
 358:	1f 92       	push	r1
 35a:	0f 92       	push	r0
 35c:	0f b6       	in	r0, 0x3f	; 63
 35e:	0f 92       	push	r0
 360:	11 24       	eor	r1, r1
 362:	2f 93       	push	r18
 364:	3f 93       	push	r19
 366:	4f 93       	push	r20
 368:	5f 93       	push	r21
 36a:	6f 93       	push	r22
 36c:	7f 93       	push	r23
 36e:	8f 93       	push	r24
 370:	9f 93       	push	r25
 372:	af 93       	push	r26
 374:	bf 93       	push	r27
 376:	ef 93       	push	r30
 378:	ff 93       	push	r31
	
	cont+=1;
 37a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <cont>
 37e:	8f 5f       	subi	r24, 0xFF	; 255
 380:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <cont>
	if(cont==4){
 384:	84 30       	cpi	r24, 0x04	; 4
 386:	91 f4       	brne	.+36     	; 0x3ac <__vector_19+0x54>
		cont=0; 
 388:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <cont>
		flag-=1; // Si paso el tiempo regreso a estado de espera
 38c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <flag>
 390:	81 50       	subi	r24, 0x01	; 1
 392:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <flag>
		cursor+=1; //Aumento la posicion del cursor
 396:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 39a:	8f 5f       	subi	r24, 0xFF	; 255
 39c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
		lcd_gotoxy(cursor, 0);
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_gotoxy>
		auxChar=63; 
 3a6:	8f e3       	ldi	r24, 0x3F	; 63
 3a8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	//Traba(&PINA,0);
}
 3ac:	ff 91       	pop	r31
 3ae:	ef 91       	pop	r30
 3b0:	bf 91       	pop	r27
 3b2:	af 91       	pop	r26
 3b4:	9f 91       	pop	r25
 3b6:	8f 91       	pop	r24
 3b8:	7f 91       	pop	r23
 3ba:	6f 91       	pop	r22
 3bc:	5f 91       	pop	r21
 3be:	4f 91       	pop	r20
 3c0:	3f 91       	pop	r19
 3c2:	2f 91       	pop	r18
 3c4:	0f 90       	pop	r0
 3c6:	0f be       	out	0x3f, r0	; 63
 3c8:	0f 90       	pop	r0
 3ca:	1f 90       	pop	r1
 3cc:	18 95       	reti

000003ce <_exit>:
 3ce:	f8 94       	cli

000003d0 <__stop_program>:
 3d0:	ff cf       	rjmp	.-2      	; 0x3d0 <__stop_program>
